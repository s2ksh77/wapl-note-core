'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var i18next = require('i18next');
var reactI18next = require('react-i18next');
var mobx = require('mobx');
var http = require('http');
var https = require('https');
var url = require('url');
var require$$0 = require('stream');
var assert = require('assert');
var tty = require('tty');
var util = require('util');
var os = require('os');
var zlib = require('zlib');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var i18next__default = /*#__PURE__*/_interopDefaultLegacy(i18next);
var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
var url__default = /*#__PURE__*/_interopDefaultLegacy(url);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
var assert__default = /*#__PURE__*/_interopDefaultLegacy(assert);
var tty__default = /*#__PURE__*/_interopDefaultLegacy(tty);
var util__default = /*#__PURE__*/_interopDefaultLegacy(util);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var NOTE_PAGE_LIST_CMPNT_DEF_01$1 = "새 챕터";
var NOTE_PAGE_LIST_CMPNT_DEF_02$1 = "새 페이지";
var NOTE_PAGE_LIST_CMPNT_DEF_03$1 = "(제목 없음)";
var NOTE_PAGE_LIST_CMPNT_DEF_04$1 = "새 페이지 추가";
var NOTE_PAGE_LIST_CMPNT_DEF_05$1 = "페이지, 챕터 검색";
var NOTE_PAGE_LIST_CMPNT_DEF_06$1 = "태그";
var NOTE_PAGE_LIST_CMPNT_DEF_07$1 = "전달받은 페이지";
var NOTE_PAGE_LIST_CREATE_N_CHPT_01$1 = "중복된 이름이 있습니다.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_02$1 = "다른 이름을 입력하세요.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_03$1 = "확인";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_01$1 = "삭제할 수 없습니다.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_02$1 = "{{userName}} 님이 수정 중입니다.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_03$1 = "페이지를 삭제하시겠습니까?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_04$1 = "삭제";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_05$1 = "취소";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_06$1 = "챕터를 삭제하시겠습니까?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_07$1 = "챕터에 속한 페이지는 휴지통으로 이동됩니다.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_01$1 = "수정";
var NOTE_PAGE_LIST_ADD_NEW_PGE_02$1 = "읽기 모드";
var NOTE_PAGE_LIST_ADD_NEW_PGE_03$1 = "편집하려면 수정 버튼을 클릭해 주세요.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_04$1 = "저장";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_01$1 = "{{moveCnt}}개의 페이지를 {{targetPage}}(으)로 이동하였습니다.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_02$1 = "{{moveCnt}}개의 챕터가 이동하였습니다.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_03$1 = "{{moveCnt}}개의 페이지가 이동하였습니다.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01$1 = "페이지가 없습니다.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02$1 = "시작하려면 '새 페이지 추가' 버튼을 클릭하세요.";
var NOTE_EDIT_PAGE_WORK_AREA_DEF_01$1 = "(탈퇴한 멤버)";
var NOTE_EDIT_PAGE_SEARCH_01$1 = "검색 결과가 없습니다.";
var NOTE_EDIT_PAGE_SEARCH_02$1 = "검색 중...";
var NOTE_EDIT_PAGE_SEARCH_03$1 = "내용 검색";
var NOTE_EDIT_PAGE_INSERT_LINK_01$1 = "링크 삽입";
var NOTE_EDIT_PAGE_INSERT_LINK_02$1 = "완료";
var NOTE_EDIT_PAGE_INSERT_LINK_03$1 = "텍스트를 입력하세요.";
var NOTE_EDIT_PAGE_INSERT_LINK_04$1 = "텍스트";
var NOTE_EDIT_PAGE_INSERT_LINK_05$1 = "링크";
var NOTE_EDIT_PAGE_INSERT_LINK_06$1 = "해당 URL은 유효하지 않습니다.";
var NOTE_EDIT_PAGE_INSERT_LINK_07$1 = "링크 편집";
var NOTE_EDIT_PAGE_INSERT_LINK_08$1 = "링크 삭제";
var NOTE_EDIT_PAGE_ATTACH_FILE_01$1 = "Drive에서 첨부";
var NOTE_EDIT_PAGE_ATTACH_FILE_02$1 = "내 PC에서 첨부";
var NOTE_EDIT_PAGE_ATTACH_FILE_03$1 = "그룹 공간이 부족하여\\n 파일을 첨부할 수 없습니다.";
var NOTE_EDIT_PAGE_ATTACH_FILE_04$1 = "파일 첨부는 한 번에 최대 20GB까지 가능합니다.";
var NOTE_EDIT_PAGE_ATTACH_FILE_05$1 = "파일 첨부는 한 번에 30개까지 가능합니다.";
var NOTE_EDIT_PAGE_COMPLETE_01$1 = "페이지를 저장하고 나가시겠습니까?";
var NOTE_EDIT_PAGE_COMPLETE_02$1 = "저장 안 함";
var NOTE_DELIVER_CONTEXT_MENU_01$1 = "이름 변경";
var NOTE_DELIVER_CONTEXT_MENU_02$1 = "Mail로 전달";
var NOTE_DELIVER_CONTEXT_MENU_03$1 = "내보내기";
var NOTE_DELIVER_CONTEXT_MENU_04$1 = "정보 보기";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01$1 = "출처 룸";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02$1 = "전달한 멤버";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03$1 = "전달 날짜";
var NOTE_DELIVER_TO_ANOTHER_ROOM_01$1 = "별명 검색";
var NOTE_DELIVER_TO_ANOTHER_ROOM_02$1 = "룸";
var NOTE_DELIVER_TO_ANOTHER_ROOM_03$1 = "프렌즈";
var NOTE_DELIVER_TO_ANOTHER_ROOM_04$1 = "나에게";
var NOTE_DELIVER_TO_ANOTHER_ROOM_05$1 = "프렌즈/룸 목록에서\n선택해 주세요.";
var NOTE_DELIVER_TO_ANOTHER_ROOM_06$1 = "룸 이름, 멤버 검색";
var NOTE_DELIVER_TO_ANOTHER_ROOM_07$1 = "전달";
var NOTE_DELIVER_TO_ANOTHER_ROOM_08$1 = "즐겨찾기";
var NOTE_TAG_TAG_MENU_01$1 = "ㄱ~ㅎ";
var NOTE_TAG_TAG_MENU_02$1 = "A~Z";
var NOTE_TAG_TAG_MENU_03$1 = "0~9";
var NOTE_TAG_TAG_MENU_04$1 = "기타";
var NOTE_TAG_TAG_MENU_05$1 = "태그 검색";
var NOTE_TAG_NO_CONTENTS_01$1 = "태그가 없습니다.";
var NOTE_TAG_NO_CONTENTS_02$1 = "페이지 하단에 태그를 입력하여 추가하세요.";
var NOTE_EDIT_PAGE_MENUBAR_01$1 = "실행 취소";
var NOTE_EDIT_PAGE_MENUBAR_02$1 = "다시 실행";
var NOTE_EDIT_PAGE_MENUBAR_03$1 = "본문 스타일";
var NOTE_EDIT_PAGE_MENUBAR_04$1 = "폰트 종류";
var NOTE_EDIT_PAGE_MENUBAR_05$1 = "폰트 크기";
var NOTE_EDIT_PAGE_MENUBAR_06$1 = "글자색";
var NOTE_EDIT_PAGE_MENUBAR_07$1 = "배경색";
var NOTE_EDIT_PAGE_MENUBAR_08$1 = "볼드체";
var NOTE_EDIT_PAGE_MENUBAR_09$1 = "이탤릭체";
var NOTE_EDIT_PAGE_MENUBAR_10$1 = "밑줄체";
var NOTE_EDIT_PAGE_MENUBAR_11$1 = "왼쪽 정렬";
var NOTE_EDIT_PAGE_MENUBAR_12$1 = "가운데 정렬";
var NOTE_EDIT_PAGE_MENUBAR_13$1 = "오른쪽 정렬";
var NOTE_EDIT_PAGE_MENUBAR_14$1 = "양쪽 정렬";
var NOTE_EDIT_PAGE_MENUBAR_15$1 = "번호 매기기";
var NOTE_EDIT_PAGE_MENUBAR_16$1 = "글머리 기호";
var NOTE_EDIT_PAGE_MENUBAR_17$1 = "체크리스트";
var NOTE_EDIT_PAGE_MENUBAR_18$1 = "들여쓰기";
var NOTE_EDIT_PAGE_MENUBAR_19$1 = "내어쓰기";
var NOTE_EDIT_PAGE_MENUBAR_20$1 = "구분선";
var NOTE_EDIT_PAGE_MENUBAR_21$1 = "표";
var NOTE_EDIT_PAGE_MENUBAR_22$1 = "현재 시간 입력";
var NOTE_EDIT_PAGE_MENUBAR_23$1 = "이미지 삽입";
var NOTE_EDIT_PAGE_MENUBAR_24$1 = "파일 첨부";
var NOTE_EDIT_PAGE_MENUBAR_25$1 = "반시계 방향 90도 회전";
var NOTE_EDIT_PAGE_MENUBAR_26$1 = "시계 방향 90도 회전";
var NOTE_EDIT_PAGE_MENUBAR_27$1 = "상하 반전";
var NOTE_EDIT_PAGE_MENUBAR_28$1 = "좌우 반전";
var NOTE_EDIT_PAGE_MENUBAR_29$1 = "이미지 편집";
var NOTE_EDIT_PAGE_MENUBAR_30$1 = "이미지 교체";
var NOTE_EDIT_PAGE_MENUBAR_31$1 = "취소선";
var NOTE_EDIT_PAGE_INSERT_LINK_09$1 = "링크로 이동";
var NOTE_EDIT_PAGE_ADD_TAG_01$1 = "이미 존재하는 태그 이름입니다.";
var NOTE_PAGE_LIST_NO_CHPT_01$1 = "챕터가 없습니다.";
var NOTE_PAGE_LIST_NO_CHPT_02$1 = "시작하려면 '새 챕터' 버튼을 클릭하세요.";
var NOTE_EDIT_PAGE_MENUBAR_32$1 = "Drive에 저장";
var NOTE_EDIT_PAGE_MENUBAR_33$1 = "내 PC에 저장";
var NOTE_EDIT_PAGE_MENUBAR_34$1 = "다운로드";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_08$1 = "{{count}}명이 수정 중입니다.";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01$1 = "PDF 형식(.pdf)";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02$1 = "TXT 형식(.txt)";
var NOTE_EDIT_PAGE_ATTACH_FILE_06$1 = "일부 파일이 업로드되지 못하였습니다.";
var NOTE_EDIT_PAGE_ATTACH_FILE_07$1 = "({{uploadCnt}}개 항목 중 {{failCnt}}개 실패)";
var NOTE_EDIT_PAGE_ATTACH_FILE_08$1 = "업로드 중인 파일이 있습니다.\\n페이지를 저장하고 나가시겠습니까?";
var NOTE_EDIT_PAGE_ATTACH_FILE_09$1 = "업로드 완료된 파일은 페이지에 저장됩니다.";
var NOTE_EDIT_PAGE_INSERT_LINK_10$1 = "올바르지 않은 주소입니다.";
var NOTE_EDIT_PAGE_INSERT_LINK_11$1 = "텍스트를 입력해 주세요.";
var NOTE_EDIT_PAGE_INSERT_LINK_12$1 = "링크를 입력해 주세요.";
var NOTE_EDIT_PAGE_INSERT_LINK_13$1 = "이메일의 경우, 앞에 'mailto:'를 붙여주세요.";
var NOTE_EDIT_PAGE_AUTO_SAVE_01$1 = "저장 중";
var NOTE_EDIT_PAGE_AUTO_SAVE_02$1 = "저장되었습니다.";
var NOTE_EDIT_PAGE_CANT_EDIT_01$1 = "수정할 수 없습니다.";
var NOTE_ADD_TAGS_01$1 = "태그 추가";
var NOTE_ADD_TAGS_02$1 = "읽기 모드에서는 태그 추가를 할 수 없습니다.";
var NOTE_EDIT_PAGE_MENUBAR_35$1 = "정렬";
var NOTE_GUEST_01$1 = "게스트는 챕터 및 페이지를 편집할 수 없습니다.";
var NOTE_GUEST_02$1 = "게스트는 사용할 수 없는 기능입니다.";
var DRIVE_UPLOAD_BTN_04$1 = "파일명이 70자를 넘는 경우 업로드할 수 없습니다.";
var NOTE_EDIT_PAGE_UPDATE_TIME_01$1 = "오전 {{time}}";
var NOTE_EDIT_PAGE_UPDATE_TIME_02$1 = "오후 {{time}}";
var NOTE_EXPORT_TITLE$1 = "제목";
var NOTE_CONTEXT_MENU_01$1 = "다른 룸으로 전달";
var NOTE_CONTEXT_MENU_02$1 = "복원";
var NOTE_CONTEXT_MENU_03$1 = "휴지통 비우기";
var NOTE_DND_ACTION_01$1 = "이동이 불가능합니다.";
var NOTE_DND_ACTION_02$1 = "전달받은 챕터 및 페이지는 이동 불가능합니다.";
var NOTE_BIN_01$1 = "휴지통";
var NOTE_BIN_02$1 = "휴지통으로 이동되었습니다.";
var NOTE_BIN_03$1 = "{{num}}개의 페이지가 휴지통으로 이동되었습니다.";
var NOTE_BIN_04$1 = "챕터가 삭제되었습니다.";
var NOTE_BIN_05$1 = "휴지통에 있는 페이지는 30일 동안 보관되며 이후 휴지통에서 삭제됩니다.";
var NOTE_BIN_06$1 = "페이지를 영구 삭제하시겠습니까?";
var NOTE_BIN_07$1 = "삭제된 페이지는 복원할 수 없습니다.";
var NOTE_BIN_08$1 = "{{num}}개의 페이지를 영구 삭제하시겠습니까?";
var NOTE_BIN_RESTORE_01$1 = "복원될 챕터가 존재하지 않습니다. \n어느 챕터로 복원하시겠습니까?";
var NOTE_BIN_RESTORE_02$1 = "{{name}}(으)로 복원되었습니다.";
var NOTE_BIN_RESTORE_03$1 = "{{num}}개의 페이지가 복원되었습니다.";
var NOTE_EDIT_PAGE_MENUBAR_36$1 = "소스 코드";
var NOTE_RECOVER_DATA_01$1 = "작성 중인 페이지가 있습니다.\\n내용을 복원하시겠습니까?";
var NOTE_META_TAG_01$1 = "챕터";
var NOTE_META_TAG_02$1 = "페이지";
var NOTE_META_TAG_03$1 = "페이지가 삭제되어 불러올 수 없습니다.";
var NOTE_META_TAG_04$1 = "챕터가 삭제되어 불러올 수 없습니다.";
var NOTE_SAVE_PAGE$1 = "페이지가 저장되었습니다.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_09$1 = "전달받은 페이지는 영구 삭제됩니다.";
var NOTE_NOTICENTER_01$1 = "챕터를 공유했습니다.";
var NOTE_NOTICENTER_02$1 = "페이지를 공유했습니다.";
var NOTE_NOTICENTER_03$1 = "{{title}}을 생성했습니다.";
var ko = {
	NOTE_PAGE_LIST_CMPNT_DEF_01: NOTE_PAGE_LIST_CMPNT_DEF_01$1,
	NOTE_PAGE_LIST_CMPNT_DEF_02: NOTE_PAGE_LIST_CMPNT_DEF_02$1,
	NOTE_PAGE_LIST_CMPNT_DEF_03: NOTE_PAGE_LIST_CMPNT_DEF_03$1,
	NOTE_PAGE_LIST_CMPNT_DEF_04: NOTE_PAGE_LIST_CMPNT_DEF_04$1,
	NOTE_PAGE_LIST_CMPNT_DEF_05: NOTE_PAGE_LIST_CMPNT_DEF_05$1,
	NOTE_PAGE_LIST_CMPNT_DEF_06: NOTE_PAGE_LIST_CMPNT_DEF_06$1,
	NOTE_PAGE_LIST_CMPNT_DEF_07: NOTE_PAGE_LIST_CMPNT_DEF_07$1,
	NOTE_PAGE_LIST_CREATE_N_CHPT_01: NOTE_PAGE_LIST_CREATE_N_CHPT_01$1,
	NOTE_PAGE_LIST_CREATE_N_CHPT_02: NOTE_PAGE_LIST_CREATE_N_CHPT_02$1,
	NOTE_PAGE_LIST_CREATE_N_CHPT_03: NOTE_PAGE_LIST_CREATE_N_CHPT_03$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_01: NOTE_PAGE_LIST_DEL_PGE_CHPT_01$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_02: NOTE_PAGE_LIST_DEL_PGE_CHPT_02$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_03: NOTE_PAGE_LIST_DEL_PGE_CHPT_03$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_04: NOTE_PAGE_LIST_DEL_PGE_CHPT_04$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_05: NOTE_PAGE_LIST_DEL_PGE_CHPT_05$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_06: NOTE_PAGE_LIST_DEL_PGE_CHPT_06$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_07: NOTE_PAGE_LIST_DEL_PGE_CHPT_07$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_01: NOTE_PAGE_LIST_ADD_NEW_PGE_01$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_02: NOTE_PAGE_LIST_ADD_NEW_PGE_02$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_03: NOTE_PAGE_LIST_ADD_NEW_PGE_03$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_04: NOTE_PAGE_LIST_ADD_NEW_PGE_04$1,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_01: NOTE_PAGE_LIST_MOVE_PGE_CHPT_01$1,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_02: NOTE_PAGE_LIST_MOVE_PGE_CHPT_02$1,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_03: NOTE_PAGE_LIST_MOVE_PGE_CHPT_03$1,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01$1,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02$1,
	NOTE_EDIT_PAGE_WORK_AREA_DEF_01: NOTE_EDIT_PAGE_WORK_AREA_DEF_01$1,
	NOTE_EDIT_PAGE_SEARCH_01: NOTE_EDIT_PAGE_SEARCH_01$1,
	NOTE_EDIT_PAGE_SEARCH_02: NOTE_EDIT_PAGE_SEARCH_02$1,
	NOTE_EDIT_PAGE_SEARCH_03: NOTE_EDIT_PAGE_SEARCH_03$1,
	NOTE_EDIT_PAGE_INSERT_LINK_01: NOTE_EDIT_PAGE_INSERT_LINK_01$1,
	NOTE_EDIT_PAGE_INSERT_LINK_02: NOTE_EDIT_PAGE_INSERT_LINK_02$1,
	NOTE_EDIT_PAGE_INSERT_LINK_03: NOTE_EDIT_PAGE_INSERT_LINK_03$1,
	NOTE_EDIT_PAGE_INSERT_LINK_04: NOTE_EDIT_PAGE_INSERT_LINK_04$1,
	NOTE_EDIT_PAGE_INSERT_LINK_05: NOTE_EDIT_PAGE_INSERT_LINK_05$1,
	NOTE_EDIT_PAGE_INSERT_LINK_06: NOTE_EDIT_PAGE_INSERT_LINK_06$1,
	NOTE_EDIT_PAGE_INSERT_LINK_07: NOTE_EDIT_PAGE_INSERT_LINK_07$1,
	NOTE_EDIT_PAGE_INSERT_LINK_08: NOTE_EDIT_PAGE_INSERT_LINK_08$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_01: NOTE_EDIT_PAGE_ATTACH_FILE_01$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_02: NOTE_EDIT_PAGE_ATTACH_FILE_02$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_03: NOTE_EDIT_PAGE_ATTACH_FILE_03$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_04: NOTE_EDIT_PAGE_ATTACH_FILE_04$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_05: NOTE_EDIT_PAGE_ATTACH_FILE_05$1,
	NOTE_EDIT_PAGE_COMPLETE_01: NOTE_EDIT_PAGE_COMPLETE_01$1,
	NOTE_EDIT_PAGE_COMPLETE_02: NOTE_EDIT_PAGE_COMPLETE_02$1,
	NOTE_DELIVER_CONTEXT_MENU_01: NOTE_DELIVER_CONTEXT_MENU_01$1,
	NOTE_DELIVER_CONTEXT_MENU_02: NOTE_DELIVER_CONTEXT_MENU_02$1,
	NOTE_DELIVER_CONTEXT_MENU_03: NOTE_DELIVER_CONTEXT_MENU_03$1,
	NOTE_DELIVER_CONTEXT_MENU_04: NOTE_DELIVER_CONTEXT_MENU_04$1,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01$1,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02$1,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_01: NOTE_DELIVER_TO_ANOTHER_ROOM_01$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_02: NOTE_DELIVER_TO_ANOTHER_ROOM_02$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_03: NOTE_DELIVER_TO_ANOTHER_ROOM_03$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_04: NOTE_DELIVER_TO_ANOTHER_ROOM_04$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_05: NOTE_DELIVER_TO_ANOTHER_ROOM_05$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_06: NOTE_DELIVER_TO_ANOTHER_ROOM_06$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_07: NOTE_DELIVER_TO_ANOTHER_ROOM_07$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_08: NOTE_DELIVER_TO_ANOTHER_ROOM_08$1,
	NOTE_TAG_TAG_MENU_01: NOTE_TAG_TAG_MENU_01$1,
	NOTE_TAG_TAG_MENU_02: NOTE_TAG_TAG_MENU_02$1,
	NOTE_TAG_TAG_MENU_03: NOTE_TAG_TAG_MENU_03$1,
	NOTE_TAG_TAG_MENU_04: NOTE_TAG_TAG_MENU_04$1,
	NOTE_TAG_TAG_MENU_05: NOTE_TAG_TAG_MENU_05$1,
	NOTE_TAG_NO_CONTENTS_01: NOTE_TAG_NO_CONTENTS_01$1,
	NOTE_TAG_NO_CONTENTS_02: NOTE_TAG_NO_CONTENTS_02$1,
	NOTE_EDIT_PAGE_MENUBAR_01: NOTE_EDIT_PAGE_MENUBAR_01$1,
	NOTE_EDIT_PAGE_MENUBAR_02: NOTE_EDIT_PAGE_MENUBAR_02$1,
	NOTE_EDIT_PAGE_MENUBAR_03: NOTE_EDIT_PAGE_MENUBAR_03$1,
	NOTE_EDIT_PAGE_MENUBAR_04: NOTE_EDIT_PAGE_MENUBAR_04$1,
	NOTE_EDIT_PAGE_MENUBAR_05: NOTE_EDIT_PAGE_MENUBAR_05$1,
	NOTE_EDIT_PAGE_MENUBAR_06: NOTE_EDIT_PAGE_MENUBAR_06$1,
	NOTE_EDIT_PAGE_MENUBAR_07: NOTE_EDIT_PAGE_MENUBAR_07$1,
	NOTE_EDIT_PAGE_MENUBAR_08: NOTE_EDIT_PAGE_MENUBAR_08$1,
	NOTE_EDIT_PAGE_MENUBAR_09: NOTE_EDIT_PAGE_MENUBAR_09$1,
	NOTE_EDIT_PAGE_MENUBAR_10: NOTE_EDIT_PAGE_MENUBAR_10$1,
	NOTE_EDIT_PAGE_MENUBAR_11: NOTE_EDIT_PAGE_MENUBAR_11$1,
	NOTE_EDIT_PAGE_MENUBAR_12: NOTE_EDIT_PAGE_MENUBAR_12$1,
	NOTE_EDIT_PAGE_MENUBAR_13: NOTE_EDIT_PAGE_MENUBAR_13$1,
	NOTE_EDIT_PAGE_MENUBAR_14: NOTE_EDIT_PAGE_MENUBAR_14$1,
	NOTE_EDIT_PAGE_MENUBAR_15: NOTE_EDIT_PAGE_MENUBAR_15$1,
	NOTE_EDIT_PAGE_MENUBAR_16: NOTE_EDIT_PAGE_MENUBAR_16$1,
	NOTE_EDIT_PAGE_MENUBAR_17: NOTE_EDIT_PAGE_MENUBAR_17$1,
	NOTE_EDIT_PAGE_MENUBAR_18: NOTE_EDIT_PAGE_MENUBAR_18$1,
	NOTE_EDIT_PAGE_MENUBAR_19: NOTE_EDIT_PAGE_MENUBAR_19$1,
	NOTE_EDIT_PAGE_MENUBAR_20: NOTE_EDIT_PAGE_MENUBAR_20$1,
	NOTE_EDIT_PAGE_MENUBAR_21: NOTE_EDIT_PAGE_MENUBAR_21$1,
	NOTE_EDIT_PAGE_MENUBAR_22: NOTE_EDIT_PAGE_MENUBAR_22$1,
	NOTE_EDIT_PAGE_MENUBAR_23: NOTE_EDIT_PAGE_MENUBAR_23$1,
	NOTE_EDIT_PAGE_MENUBAR_24: NOTE_EDIT_PAGE_MENUBAR_24$1,
	NOTE_EDIT_PAGE_MENUBAR_25: NOTE_EDIT_PAGE_MENUBAR_25$1,
	NOTE_EDIT_PAGE_MENUBAR_26: NOTE_EDIT_PAGE_MENUBAR_26$1,
	NOTE_EDIT_PAGE_MENUBAR_27: NOTE_EDIT_PAGE_MENUBAR_27$1,
	NOTE_EDIT_PAGE_MENUBAR_28: NOTE_EDIT_PAGE_MENUBAR_28$1,
	NOTE_EDIT_PAGE_MENUBAR_29: NOTE_EDIT_PAGE_MENUBAR_29$1,
	NOTE_EDIT_PAGE_MENUBAR_30: NOTE_EDIT_PAGE_MENUBAR_30$1,
	NOTE_EDIT_PAGE_MENUBAR_31: NOTE_EDIT_PAGE_MENUBAR_31$1,
	NOTE_EDIT_PAGE_INSERT_LINK_09: NOTE_EDIT_PAGE_INSERT_LINK_09$1,
	NOTE_EDIT_PAGE_ADD_TAG_01: NOTE_EDIT_PAGE_ADD_TAG_01$1,
	NOTE_PAGE_LIST_NO_CHPT_01: NOTE_PAGE_LIST_NO_CHPT_01$1,
	NOTE_PAGE_LIST_NO_CHPT_02: NOTE_PAGE_LIST_NO_CHPT_02$1,
	NOTE_EDIT_PAGE_MENUBAR_32: NOTE_EDIT_PAGE_MENUBAR_32$1,
	NOTE_EDIT_PAGE_MENUBAR_33: NOTE_EDIT_PAGE_MENUBAR_33$1,
	NOTE_EDIT_PAGE_MENUBAR_34: NOTE_EDIT_PAGE_MENUBAR_34$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_08: NOTE_PAGE_LIST_DEL_PGE_CHPT_08$1,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01$1,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_06: NOTE_EDIT_PAGE_ATTACH_FILE_06$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_07: NOTE_EDIT_PAGE_ATTACH_FILE_07$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_08: NOTE_EDIT_PAGE_ATTACH_FILE_08$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_09: NOTE_EDIT_PAGE_ATTACH_FILE_09$1,
	NOTE_EDIT_PAGE_INSERT_LINK_10: NOTE_EDIT_PAGE_INSERT_LINK_10$1,
	NOTE_EDIT_PAGE_INSERT_LINK_11: NOTE_EDIT_PAGE_INSERT_LINK_11$1,
	NOTE_EDIT_PAGE_INSERT_LINK_12: NOTE_EDIT_PAGE_INSERT_LINK_12$1,
	NOTE_EDIT_PAGE_INSERT_LINK_13: NOTE_EDIT_PAGE_INSERT_LINK_13$1,
	NOTE_EDIT_PAGE_AUTO_SAVE_01: NOTE_EDIT_PAGE_AUTO_SAVE_01$1,
	NOTE_EDIT_PAGE_AUTO_SAVE_02: NOTE_EDIT_PAGE_AUTO_SAVE_02$1,
	NOTE_EDIT_PAGE_CANT_EDIT_01: NOTE_EDIT_PAGE_CANT_EDIT_01$1,
	NOTE_ADD_TAGS_01: NOTE_ADD_TAGS_01$1,
	NOTE_ADD_TAGS_02: NOTE_ADD_TAGS_02$1,
	NOTE_EDIT_PAGE_MENUBAR_35: NOTE_EDIT_PAGE_MENUBAR_35$1,
	NOTE_GUEST_01: NOTE_GUEST_01$1,
	NOTE_GUEST_02: NOTE_GUEST_02$1,
	DRIVE_UPLOAD_BTN_04: DRIVE_UPLOAD_BTN_04$1,
	NOTE_EDIT_PAGE_UPDATE_TIME_01: NOTE_EDIT_PAGE_UPDATE_TIME_01$1,
	NOTE_EDIT_PAGE_UPDATE_TIME_02: NOTE_EDIT_PAGE_UPDATE_TIME_02$1,
	NOTE_EXPORT_TITLE: NOTE_EXPORT_TITLE$1,
	NOTE_CONTEXT_MENU_01: NOTE_CONTEXT_MENU_01$1,
	NOTE_CONTEXT_MENU_02: NOTE_CONTEXT_MENU_02$1,
	NOTE_CONTEXT_MENU_03: NOTE_CONTEXT_MENU_03$1,
	NOTE_DND_ACTION_01: NOTE_DND_ACTION_01$1,
	NOTE_DND_ACTION_02: NOTE_DND_ACTION_02$1,
	NOTE_BIN_01: NOTE_BIN_01$1,
	NOTE_BIN_02: NOTE_BIN_02$1,
	NOTE_BIN_03: NOTE_BIN_03$1,
	NOTE_BIN_04: NOTE_BIN_04$1,
	NOTE_BIN_05: NOTE_BIN_05$1,
	NOTE_BIN_06: NOTE_BIN_06$1,
	NOTE_BIN_07: NOTE_BIN_07$1,
	NOTE_BIN_08: NOTE_BIN_08$1,
	NOTE_BIN_RESTORE_01: NOTE_BIN_RESTORE_01$1,
	NOTE_BIN_RESTORE_02: NOTE_BIN_RESTORE_02$1,
	NOTE_BIN_RESTORE_03: NOTE_BIN_RESTORE_03$1,
	NOTE_EDIT_PAGE_MENUBAR_36: NOTE_EDIT_PAGE_MENUBAR_36$1,
	NOTE_RECOVER_DATA_01: NOTE_RECOVER_DATA_01$1,
	NOTE_META_TAG_01: NOTE_META_TAG_01$1,
	NOTE_META_TAG_02: NOTE_META_TAG_02$1,
	NOTE_META_TAG_03: NOTE_META_TAG_03$1,
	NOTE_META_TAG_04: NOTE_META_TAG_04$1,
	NOTE_SAVE_PAGE: NOTE_SAVE_PAGE$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_09: NOTE_PAGE_LIST_DEL_PGE_CHPT_09$1,
	NOTE_NOTICENTER_01: NOTE_NOTICENTER_01$1,
	NOTE_NOTICENTER_02: NOTE_NOTICENTER_02$1,
	NOTE_NOTICENTER_03: NOTE_NOTICENTER_03$1
};

var NOTE_PAGE_LIST_CMPNT_DEF_01 = "New Chapter";
var NOTE_PAGE_LIST_CMPNT_DEF_02 = "New Page";
var NOTE_PAGE_LIST_CMPNT_DEF_03 = "(Untitled)";
var NOTE_PAGE_LIST_CMPNT_DEF_04 = "Add New Page";
var NOTE_PAGE_LIST_CMPNT_DEF_05 = "Search page or chapter";
var NOTE_PAGE_LIST_CMPNT_DEF_06 = "Tag";
var NOTE_PAGE_LIST_CMPNT_DEF_07 = "Page Received";
var NOTE_PAGE_LIST_CREATE_N_CHPT_01 = "Duplicate name exists.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_02 = "Enter another name.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_03 = "OK";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_01 = "Unable to delete.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_02 = "It is currently being modified by {{userName}}";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_03 = "Do you want to delete this page?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_04 = "Delete";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_05 = "Cancel";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_06 = "Do you want to delete this chapter?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_07 = "The pages belonging to the chapter are moved to Trash.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_01 = "Modify";
var NOTE_PAGE_LIST_ADD_NEW_PGE_02 = "Read Mode";
var NOTE_PAGE_LIST_ADD_NEW_PGE_03 = "Click Modify to edit this page.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_04 = "Save";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_01 = "{{moveCnt}} pages moved to {{targetPage}}.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_02 = "{{moveCnt}} chapters moved.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_03 = "{{moveCnt}} pages moved.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01 = "No page exists.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02 = "To create one, click 'Add New Page'.";
var NOTE_EDIT_PAGE_WORK_AREA_DEF_01 = "(Unregistered Member)";
var NOTE_EDIT_PAGE_SEARCH_01 = "No search results found.";
var NOTE_EDIT_PAGE_SEARCH_02 = "Searching...";
var NOTE_EDIT_PAGE_SEARCH_03 = "Search keyword";
var NOTE_EDIT_PAGE_INSERT_LINK_01 = "Insert Link";
var NOTE_EDIT_PAGE_INSERT_LINK_02 = "Done";
var NOTE_EDIT_PAGE_INSERT_LINK_03 = "Enter a text.";
var NOTE_EDIT_PAGE_INSERT_LINK_04 = "Text";
var NOTE_EDIT_PAGE_INSERT_LINK_05 = "Link";
var NOTE_EDIT_PAGE_INSERT_LINK_06 = "The URL is not valid.";
var NOTE_EDIT_PAGE_INSERT_LINK_07 = "Edit Link";
var NOTE_EDIT_PAGE_INSERT_LINK_08 = "Delete Link";
var NOTE_EDIT_PAGE_ATTACH_FILE_01 = "Attach from Drive";
var NOTE_EDIT_PAGE_ATTACH_FILE_02 = "Attach from My PC";
var NOTE_EDIT_PAGE_ATTACH_FILE_03 = "There is not enough storage space to attach the file.";
var NOTE_EDIT_PAGE_ATTACH_FILE_04 = "You can attach up to 20 GB files at a time.";
var NOTE_EDIT_PAGE_ATTACH_FILE_05 = "You can attach up to 30 files at a time.";
var NOTE_EDIT_PAGE_COMPLETE_01 = "Do you want to save this page and exit?";
var NOTE_EDIT_PAGE_COMPLETE_02 = "Not Save";
var NOTE_DELIVER_CONTEXT_MENU_01 = "Rename";
var NOTE_DELIVER_CONTEXT_MENU_02 = "Send Email";
var NOTE_DELIVER_CONTEXT_MENU_03 = "Export";
var NOTE_DELIVER_CONTEXT_MENU_04 = "View Information";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01 = "Room";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02 = "Member";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03 = "Date";
var NOTE_DELIVER_TO_ANOTHER_ROOM_01 = "Search nickname";
var NOTE_DELIVER_TO_ANOTHER_ROOM_02 = "Rooms";
var NOTE_DELIVER_TO_ANOTHER_ROOM_03 = "Friends";
var NOTE_DELIVER_TO_ANOTHER_ROOM_04 = "Me";
var NOTE_DELIVER_TO_ANOTHER_ROOM_05 = "Select people from the Friends/Rooms list.";
var NOTE_DELIVER_TO_ANOTHER_ROOM_06 = "Search room name or member";
var NOTE_DELIVER_TO_ANOTHER_ROOM_07 = "Send";
var NOTE_DELIVER_TO_ANOTHER_ROOM_08 = "Favorites";
var NOTE_TAG_TAG_MENU_01 = "ㄱ-ㅎ";
var NOTE_TAG_TAG_MENU_02 = "A-Z";
var NOTE_TAG_TAG_MENU_03 = "0-9";
var NOTE_TAG_TAG_MENU_04 = "Others";
var NOTE_TAG_TAG_MENU_05 = "Search tag";
var NOTE_TAG_NO_CONTENTS_01 = "No tag found.";
var NOTE_TAG_NO_CONTENTS_02 = "Enter a tag at the bottom of the page or choose one from the list.";
var NOTE_EDIT_PAGE_MENUBAR_01 = "Undo";
var NOTE_EDIT_PAGE_MENUBAR_02 = "Redo";
var NOTE_EDIT_PAGE_MENUBAR_03 = "Body Style";
var NOTE_EDIT_PAGE_MENUBAR_04 = "Font Type";
var NOTE_EDIT_PAGE_MENUBAR_05 = "Font Size";
var NOTE_EDIT_PAGE_MENUBAR_06 = "Character Color";
var NOTE_EDIT_PAGE_MENUBAR_07 = "Background Color";
var NOTE_EDIT_PAGE_MENUBAR_08 = "Bold";
var NOTE_EDIT_PAGE_MENUBAR_09 = "Italics";
var NOTE_EDIT_PAGE_MENUBAR_10 = "Underline";
var NOTE_EDIT_PAGE_MENUBAR_11 = "Left";
var NOTE_EDIT_PAGE_MENUBAR_12 = "Middle";
var NOTE_EDIT_PAGE_MENUBAR_13 = "Right";
var NOTE_EDIT_PAGE_MENUBAR_14 = "Both";
var NOTE_EDIT_PAGE_MENUBAR_15 = "Numbering";
var NOTE_EDIT_PAGE_MENUBAR_16 = "Bullet Point";
var NOTE_EDIT_PAGE_MENUBAR_17 = "Checklist";
var NOTE_EDIT_PAGE_MENUBAR_18 = "Indent";
var NOTE_EDIT_PAGE_MENUBAR_19 = "Outdent";
var NOTE_EDIT_PAGE_MENUBAR_20 = "Delimiter";
var NOTE_EDIT_PAGE_MENUBAR_21 = "Tables";
var NOTE_EDIT_PAGE_MENUBAR_22 = "Enter Current time";
var NOTE_EDIT_PAGE_MENUBAR_23 = "Insert Images/Videos";
var NOTE_EDIT_PAGE_MENUBAR_24 = "Attach Files";
var NOTE_EDIT_PAGE_MENUBAR_25 = "Rotate by 90 Degrees Counterclockwise";
var NOTE_EDIT_PAGE_MENUBAR_26 = "Rotate by 90 Degrees Clockwise";
var NOTE_EDIT_PAGE_MENUBAR_27 = "Flip Vertically";
var NOTE_EDIT_PAGE_MENUBAR_28 = "Flip Horizontally";
var NOTE_EDIT_PAGE_MENUBAR_29 = "Edit Image";
var NOTE_EDIT_PAGE_MENUBAR_30 = "Replace Image";
var NOTE_EDIT_PAGE_MENUBAR_31 = "Strikethrough";
var NOTE_EDIT_PAGE_INSERT_LINK_09 = "Move to Link";
var NOTE_EDIT_PAGE_ADD_TAG_01 = "The tag name already exists.";
var NOTE_PAGE_LIST_NO_CHPT_01 = "No chapter exists.";
var NOTE_PAGE_LIST_NO_CHPT_02 = "To create one, click 'New Chapter'.";
var NOTE_EDIT_PAGE_MENUBAR_32 = "Save to Drive";
var NOTE_EDIT_PAGE_MENUBAR_33 = "Save to My PC";
var NOTE_EDIT_PAGE_MENUBAR_34 = "Download";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_08 = "It is currently being modified by {{count}}.";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01 = "PDF Format(.pdf)";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02 = "TXT Format(.txt)";
var NOTE_EDIT_PAGE_ATTACH_FILE_06 = "Unable to upload some files.";
var NOTE_EDIT_PAGE_ATTACH_FILE_07 = "({{failCnt}} out of {{uploadCnt}} failed)";
var NOTE_EDIT_PAGE_ATTACH_FILE_08 = "There is a file currently being uploaded.\\nDo you want to save and exit?";
var NOTE_EDIT_PAGE_ATTACH_FILE_09 = "The uploaded file is saved on the page.";
var NOTE_EDIT_PAGE_INSERT_LINK_10 = "Invalid address.";
var NOTE_EDIT_PAGE_INSERT_LINK_11 = "Enter a text.";
var NOTE_EDIT_PAGE_INSERT_LINK_12 = "Enter a link.";
var NOTE_EDIT_PAGE_INSERT_LINK_13 = "Add 'mailto:' in an email.";
var NOTE_EDIT_PAGE_AUTO_SAVE_01 = "Saving…";
var NOTE_EDIT_PAGE_AUTO_SAVE_02 = "Page saved.";
var NOTE_EDIT_PAGE_CANT_EDIT_01 = "Unable to Modify.";
var NOTE_ADD_TAGS_01 = "Add Tag";
var NOTE_ADD_TAGS_02 = "You cannot add tags in read mode.";
var NOTE_EDIT_PAGE_MENUBAR_35 = "Align";
var NOTE_GUEST_01 = "Guests cannot edit chapters and pages.";
var NOTE_GUEST_02 = "This feature is not available to guests.";
var DRIVE_UPLOAD_BTN_04 = "The name of the file cannot exceed the limit of 70 characters. ";
var NOTE_EDIT_PAGE_UPDATE_TIME_01 = "{{time}} AM";
var NOTE_EDIT_PAGE_UPDATE_TIME_02 = "{{time}} PM";
var NOTE_EXPORT_TITLE = "Title";
var NOTE_CONTEXT_MENU_01 = "Forwarded to another room.";
var NOTE_CONTEXT_MENU_02 = "Recover";
var NOTE_CONTEXT_MENU_03 = "Empty Trash";
var NOTE_DND_ACTION_01 = "Cannot move.";
var NOTE_DND_ACTION_02 = "Received chapters and pages cannot be moved.";
var NOTE_BIN_01 = "Trash";
var NOTE_BIN_02 = "Moved to Trash.";
var NOTE_BIN_03 = "{{num}} pages have been moved to Trash.";
var NOTE_BIN_04 = "Chapter deleted.";
var NOTE_BIN_05 = "After 30 days, pages are deleted from the Trash.";
var NOTE_BIN_06 = "Do you want to permanently delete this page?";
var NOTE_BIN_07 = "This action cannot be undone.";
var NOTE_BIN_08 = "Do you want to permanently delete {{num}} pages?";
var NOTE_BIN_RESTORE_01 = "Which chapter do you want to restore to?";
var NOTE_BIN_RESTORE_02 = "Page has been restored.";
var NOTE_BIN_RESTORE_03 = "{{num}} pages have been restored.";
var NOTE_EDIT_PAGE_MENUBAR_36 = "Source Code";
var NOTE_RECOVER_DATA_01 = "There is a page being created.\\nDo you want to recover?";
var NOTE_META_TAG_01 = "Chapter";
var NOTE_META_TAG_02 = "Page";
var NOTE_META_TAG_03 = "Unable to load the page because it has been deleted.";
var NOTE_META_TAG_04 = "Unable to load the chapter because it has been deleted.";
var NOTE_SAVE_PAGE = "Page saved.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_09 = "Pages forwarded will be permanently deleted.";
var NOTE_NOTICENTER_01 = "The chapter has been shared.";
var NOTE_NOTICENTER_02 = "The page has been shared.";
var NOTE_NOTICENTER_03 = "{{title}} has been created.";
var en = {
	NOTE_PAGE_LIST_CMPNT_DEF_01: NOTE_PAGE_LIST_CMPNT_DEF_01,
	NOTE_PAGE_LIST_CMPNT_DEF_02: NOTE_PAGE_LIST_CMPNT_DEF_02,
	NOTE_PAGE_LIST_CMPNT_DEF_03: NOTE_PAGE_LIST_CMPNT_DEF_03,
	NOTE_PAGE_LIST_CMPNT_DEF_04: NOTE_PAGE_LIST_CMPNT_DEF_04,
	NOTE_PAGE_LIST_CMPNT_DEF_05: NOTE_PAGE_LIST_CMPNT_DEF_05,
	NOTE_PAGE_LIST_CMPNT_DEF_06: NOTE_PAGE_LIST_CMPNT_DEF_06,
	NOTE_PAGE_LIST_CMPNT_DEF_07: NOTE_PAGE_LIST_CMPNT_DEF_07,
	NOTE_PAGE_LIST_CREATE_N_CHPT_01: NOTE_PAGE_LIST_CREATE_N_CHPT_01,
	NOTE_PAGE_LIST_CREATE_N_CHPT_02: NOTE_PAGE_LIST_CREATE_N_CHPT_02,
	NOTE_PAGE_LIST_CREATE_N_CHPT_03: NOTE_PAGE_LIST_CREATE_N_CHPT_03,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_01: NOTE_PAGE_LIST_DEL_PGE_CHPT_01,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_02: NOTE_PAGE_LIST_DEL_PGE_CHPT_02,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_03: NOTE_PAGE_LIST_DEL_PGE_CHPT_03,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_04: NOTE_PAGE_LIST_DEL_PGE_CHPT_04,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_05: NOTE_PAGE_LIST_DEL_PGE_CHPT_05,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_06: NOTE_PAGE_LIST_DEL_PGE_CHPT_06,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_07: NOTE_PAGE_LIST_DEL_PGE_CHPT_07,
	NOTE_PAGE_LIST_ADD_NEW_PGE_01: NOTE_PAGE_LIST_ADD_NEW_PGE_01,
	NOTE_PAGE_LIST_ADD_NEW_PGE_02: NOTE_PAGE_LIST_ADD_NEW_PGE_02,
	NOTE_PAGE_LIST_ADD_NEW_PGE_03: NOTE_PAGE_LIST_ADD_NEW_PGE_03,
	NOTE_PAGE_LIST_ADD_NEW_PGE_04: NOTE_PAGE_LIST_ADD_NEW_PGE_04,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_01: NOTE_PAGE_LIST_MOVE_PGE_CHPT_01,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_02: NOTE_PAGE_LIST_MOVE_PGE_CHPT_02,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_03: NOTE_PAGE_LIST_MOVE_PGE_CHPT_03,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02,
	NOTE_EDIT_PAGE_WORK_AREA_DEF_01: NOTE_EDIT_PAGE_WORK_AREA_DEF_01,
	NOTE_EDIT_PAGE_SEARCH_01: NOTE_EDIT_PAGE_SEARCH_01,
	NOTE_EDIT_PAGE_SEARCH_02: NOTE_EDIT_PAGE_SEARCH_02,
	NOTE_EDIT_PAGE_SEARCH_03: NOTE_EDIT_PAGE_SEARCH_03,
	NOTE_EDIT_PAGE_INSERT_LINK_01: NOTE_EDIT_PAGE_INSERT_LINK_01,
	NOTE_EDIT_PAGE_INSERT_LINK_02: NOTE_EDIT_PAGE_INSERT_LINK_02,
	NOTE_EDIT_PAGE_INSERT_LINK_03: NOTE_EDIT_PAGE_INSERT_LINK_03,
	NOTE_EDIT_PAGE_INSERT_LINK_04: NOTE_EDIT_PAGE_INSERT_LINK_04,
	NOTE_EDIT_PAGE_INSERT_LINK_05: NOTE_EDIT_PAGE_INSERT_LINK_05,
	NOTE_EDIT_PAGE_INSERT_LINK_06: NOTE_EDIT_PAGE_INSERT_LINK_06,
	NOTE_EDIT_PAGE_INSERT_LINK_07: NOTE_EDIT_PAGE_INSERT_LINK_07,
	NOTE_EDIT_PAGE_INSERT_LINK_08: NOTE_EDIT_PAGE_INSERT_LINK_08,
	NOTE_EDIT_PAGE_ATTACH_FILE_01: NOTE_EDIT_PAGE_ATTACH_FILE_01,
	NOTE_EDIT_PAGE_ATTACH_FILE_02: NOTE_EDIT_PAGE_ATTACH_FILE_02,
	NOTE_EDIT_PAGE_ATTACH_FILE_03: NOTE_EDIT_PAGE_ATTACH_FILE_03,
	NOTE_EDIT_PAGE_ATTACH_FILE_04: NOTE_EDIT_PAGE_ATTACH_FILE_04,
	NOTE_EDIT_PAGE_ATTACH_FILE_05: NOTE_EDIT_PAGE_ATTACH_FILE_05,
	NOTE_EDIT_PAGE_COMPLETE_01: NOTE_EDIT_PAGE_COMPLETE_01,
	NOTE_EDIT_PAGE_COMPLETE_02: NOTE_EDIT_PAGE_COMPLETE_02,
	NOTE_DELIVER_CONTEXT_MENU_01: NOTE_DELIVER_CONTEXT_MENU_01,
	NOTE_DELIVER_CONTEXT_MENU_02: NOTE_DELIVER_CONTEXT_MENU_02,
	NOTE_DELIVER_CONTEXT_MENU_03: NOTE_DELIVER_CONTEXT_MENU_03,
	NOTE_DELIVER_CONTEXT_MENU_04: NOTE_DELIVER_CONTEXT_MENU_04,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03,
	NOTE_DELIVER_TO_ANOTHER_ROOM_01: NOTE_DELIVER_TO_ANOTHER_ROOM_01,
	NOTE_DELIVER_TO_ANOTHER_ROOM_02: NOTE_DELIVER_TO_ANOTHER_ROOM_02,
	NOTE_DELIVER_TO_ANOTHER_ROOM_03: NOTE_DELIVER_TO_ANOTHER_ROOM_03,
	NOTE_DELIVER_TO_ANOTHER_ROOM_04: NOTE_DELIVER_TO_ANOTHER_ROOM_04,
	NOTE_DELIVER_TO_ANOTHER_ROOM_05: NOTE_DELIVER_TO_ANOTHER_ROOM_05,
	NOTE_DELIVER_TO_ANOTHER_ROOM_06: NOTE_DELIVER_TO_ANOTHER_ROOM_06,
	NOTE_DELIVER_TO_ANOTHER_ROOM_07: NOTE_DELIVER_TO_ANOTHER_ROOM_07,
	NOTE_DELIVER_TO_ANOTHER_ROOM_08: NOTE_DELIVER_TO_ANOTHER_ROOM_08,
	NOTE_TAG_TAG_MENU_01: NOTE_TAG_TAG_MENU_01,
	NOTE_TAG_TAG_MENU_02: NOTE_TAG_TAG_MENU_02,
	NOTE_TAG_TAG_MENU_03: NOTE_TAG_TAG_MENU_03,
	NOTE_TAG_TAG_MENU_04: NOTE_TAG_TAG_MENU_04,
	NOTE_TAG_TAG_MENU_05: NOTE_TAG_TAG_MENU_05,
	NOTE_TAG_NO_CONTENTS_01: NOTE_TAG_NO_CONTENTS_01,
	NOTE_TAG_NO_CONTENTS_02: NOTE_TAG_NO_CONTENTS_02,
	NOTE_EDIT_PAGE_MENUBAR_01: NOTE_EDIT_PAGE_MENUBAR_01,
	NOTE_EDIT_PAGE_MENUBAR_02: NOTE_EDIT_PAGE_MENUBAR_02,
	NOTE_EDIT_PAGE_MENUBAR_03: NOTE_EDIT_PAGE_MENUBAR_03,
	NOTE_EDIT_PAGE_MENUBAR_04: NOTE_EDIT_PAGE_MENUBAR_04,
	NOTE_EDIT_PAGE_MENUBAR_05: NOTE_EDIT_PAGE_MENUBAR_05,
	NOTE_EDIT_PAGE_MENUBAR_06: NOTE_EDIT_PAGE_MENUBAR_06,
	NOTE_EDIT_PAGE_MENUBAR_07: NOTE_EDIT_PAGE_MENUBAR_07,
	NOTE_EDIT_PAGE_MENUBAR_08: NOTE_EDIT_PAGE_MENUBAR_08,
	NOTE_EDIT_PAGE_MENUBAR_09: NOTE_EDIT_PAGE_MENUBAR_09,
	NOTE_EDIT_PAGE_MENUBAR_10: NOTE_EDIT_PAGE_MENUBAR_10,
	NOTE_EDIT_PAGE_MENUBAR_11: NOTE_EDIT_PAGE_MENUBAR_11,
	NOTE_EDIT_PAGE_MENUBAR_12: NOTE_EDIT_PAGE_MENUBAR_12,
	NOTE_EDIT_PAGE_MENUBAR_13: NOTE_EDIT_PAGE_MENUBAR_13,
	NOTE_EDIT_PAGE_MENUBAR_14: NOTE_EDIT_PAGE_MENUBAR_14,
	NOTE_EDIT_PAGE_MENUBAR_15: NOTE_EDIT_PAGE_MENUBAR_15,
	NOTE_EDIT_PAGE_MENUBAR_16: NOTE_EDIT_PAGE_MENUBAR_16,
	NOTE_EDIT_PAGE_MENUBAR_17: NOTE_EDIT_PAGE_MENUBAR_17,
	NOTE_EDIT_PAGE_MENUBAR_18: NOTE_EDIT_PAGE_MENUBAR_18,
	NOTE_EDIT_PAGE_MENUBAR_19: NOTE_EDIT_PAGE_MENUBAR_19,
	NOTE_EDIT_PAGE_MENUBAR_20: NOTE_EDIT_PAGE_MENUBAR_20,
	NOTE_EDIT_PAGE_MENUBAR_21: NOTE_EDIT_PAGE_MENUBAR_21,
	NOTE_EDIT_PAGE_MENUBAR_22: NOTE_EDIT_PAGE_MENUBAR_22,
	NOTE_EDIT_PAGE_MENUBAR_23: NOTE_EDIT_PAGE_MENUBAR_23,
	NOTE_EDIT_PAGE_MENUBAR_24: NOTE_EDIT_PAGE_MENUBAR_24,
	NOTE_EDIT_PAGE_MENUBAR_25: NOTE_EDIT_PAGE_MENUBAR_25,
	NOTE_EDIT_PAGE_MENUBAR_26: NOTE_EDIT_PAGE_MENUBAR_26,
	NOTE_EDIT_PAGE_MENUBAR_27: NOTE_EDIT_PAGE_MENUBAR_27,
	NOTE_EDIT_PAGE_MENUBAR_28: NOTE_EDIT_PAGE_MENUBAR_28,
	NOTE_EDIT_PAGE_MENUBAR_29: NOTE_EDIT_PAGE_MENUBAR_29,
	NOTE_EDIT_PAGE_MENUBAR_30: NOTE_EDIT_PAGE_MENUBAR_30,
	NOTE_EDIT_PAGE_MENUBAR_31: NOTE_EDIT_PAGE_MENUBAR_31,
	NOTE_EDIT_PAGE_INSERT_LINK_09: NOTE_EDIT_PAGE_INSERT_LINK_09,
	NOTE_EDIT_PAGE_ADD_TAG_01: NOTE_EDIT_PAGE_ADD_TAG_01,
	NOTE_PAGE_LIST_NO_CHPT_01: NOTE_PAGE_LIST_NO_CHPT_01,
	NOTE_PAGE_LIST_NO_CHPT_02: NOTE_PAGE_LIST_NO_CHPT_02,
	NOTE_EDIT_PAGE_MENUBAR_32: NOTE_EDIT_PAGE_MENUBAR_32,
	NOTE_EDIT_PAGE_MENUBAR_33: NOTE_EDIT_PAGE_MENUBAR_33,
	NOTE_EDIT_PAGE_MENUBAR_34: NOTE_EDIT_PAGE_MENUBAR_34,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_08: NOTE_PAGE_LIST_DEL_PGE_CHPT_08,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02,
	NOTE_EDIT_PAGE_ATTACH_FILE_06: NOTE_EDIT_PAGE_ATTACH_FILE_06,
	NOTE_EDIT_PAGE_ATTACH_FILE_07: NOTE_EDIT_PAGE_ATTACH_FILE_07,
	NOTE_EDIT_PAGE_ATTACH_FILE_08: NOTE_EDIT_PAGE_ATTACH_FILE_08,
	NOTE_EDIT_PAGE_ATTACH_FILE_09: NOTE_EDIT_PAGE_ATTACH_FILE_09,
	NOTE_EDIT_PAGE_INSERT_LINK_10: NOTE_EDIT_PAGE_INSERT_LINK_10,
	NOTE_EDIT_PAGE_INSERT_LINK_11: NOTE_EDIT_PAGE_INSERT_LINK_11,
	NOTE_EDIT_PAGE_INSERT_LINK_12: NOTE_EDIT_PAGE_INSERT_LINK_12,
	NOTE_EDIT_PAGE_INSERT_LINK_13: NOTE_EDIT_PAGE_INSERT_LINK_13,
	NOTE_EDIT_PAGE_AUTO_SAVE_01: NOTE_EDIT_PAGE_AUTO_SAVE_01,
	NOTE_EDIT_PAGE_AUTO_SAVE_02: NOTE_EDIT_PAGE_AUTO_SAVE_02,
	NOTE_EDIT_PAGE_CANT_EDIT_01: NOTE_EDIT_PAGE_CANT_EDIT_01,
	NOTE_ADD_TAGS_01: NOTE_ADD_TAGS_01,
	NOTE_ADD_TAGS_02: NOTE_ADD_TAGS_02,
	NOTE_EDIT_PAGE_MENUBAR_35: NOTE_EDIT_PAGE_MENUBAR_35,
	NOTE_GUEST_01: NOTE_GUEST_01,
	NOTE_GUEST_02: NOTE_GUEST_02,
	DRIVE_UPLOAD_BTN_04: DRIVE_UPLOAD_BTN_04,
	NOTE_EDIT_PAGE_UPDATE_TIME_01: NOTE_EDIT_PAGE_UPDATE_TIME_01,
	NOTE_EDIT_PAGE_UPDATE_TIME_02: NOTE_EDIT_PAGE_UPDATE_TIME_02,
	NOTE_EXPORT_TITLE: NOTE_EXPORT_TITLE,
	NOTE_CONTEXT_MENU_01: NOTE_CONTEXT_MENU_01,
	NOTE_CONTEXT_MENU_02: NOTE_CONTEXT_MENU_02,
	NOTE_CONTEXT_MENU_03: NOTE_CONTEXT_MENU_03,
	NOTE_DND_ACTION_01: NOTE_DND_ACTION_01,
	NOTE_DND_ACTION_02: NOTE_DND_ACTION_02,
	NOTE_BIN_01: NOTE_BIN_01,
	NOTE_BIN_02: NOTE_BIN_02,
	NOTE_BIN_03: NOTE_BIN_03,
	NOTE_BIN_04: NOTE_BIN_04,
	NOTE_BIN_05: NOTE_BIN_05,
	NOTE_BIN_06: NOTE_BIN_06,
	NOTE_BIN_07: NOTE_BIN_07,
	NOTE_BIN_08: NOTE_BIN_08,
	NOTE_BIN_RESTORE_01: NOTE_BIN_RESTORE_01,
	NOTE_BIN_RESTORE_02: NOTE_BIN_RESTORE_02,
	NOTE_BIN_RESTORE_03: NOTE_BIN_RESTORE_03,
	NOTE_EDIT_PAGE_MENUBAR_36: NOTE_EDIT_PAGE_MENUBAR_36,
	NOTE_RECOVER_DATA_01: NOTE_RECOVER_DATA_01,
	NOTE_META_TAG_01: NOTE_META_TAG_01,
	NOTE_META_TAG_02: NOTE_META_TAG_02,
	NOTE_META_TAG_03: NOTE_META_TAG_03,
	NOTE_META_TAG_04: NOTE_META_TAG_04,
	NOTE_SAVE_PAGE: NOTE_SAVE_PAGE,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_09: NOTE_PAGE_LIST_DEL_PGE_CHPT_09,
	NOTE_NOTICENTER_01: NOTE_NOTICENTER_01,
	NOTE_NOTICENTER_02: NOTE_NOTICENTER_02,
	NOTE_NOTICENTER_03: NOTE_NOTICENTER_03
};

var resources = {
    ko: {
        translation: ko,
    },
    en: {
        translation: en,
    },
};
var i18n = i18next__default["default"].createInstance();
i18n.use(reactI18next.initReactI18next).init({
    debug: false,
    resources: resources,
    lng: 'ko',
    fallbackLng: 'ko',
    ns: ['translation'],
    defaultNS: 'translation',
    keySeparator: false,
    interpolation: { escapeValue: false },
    react: {
        useSuspense: false,
    },
}, function (err) {
    if (err) {
        console.log(err);
    }
});

var useNoteI18nInit = function () {
};

var useNoteCore = function () {
};

var ChapterModel = /** @class */ (function () {
    function ChapterModel(chapter) {
        // Origin
        this.response = chapter;
        mobx.makeAutoObservable(this);
    }
    Object.defineProperty(ChapterModel.prototype, "id", {
        get: function () {
            return this.response.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "channelId", {
        get: function () {
            return this.response.channelId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "name", {
        get: function () {
            return this.response.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "type", {
        get: function () {
            return this.response.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "modifiedDate", {
        get: function () {
            return this.response.modifiedDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "color", {
        get: function () {
            return this.response.color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "pageList", {
        get: function () {
            return this.response.pageList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "sharedDate", {
        get: function () {
            return this.response.sharedDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "sharedRoomId", {
        get: function () {
            return this.response.sharedRoomId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "sharedUserId", {
        get: function () {
            return this.response.sharedUserId;
        },
        enumerable: false,
        configurable: true
    });
    return ChapterModel;
}());

var PageModel = /** @class */ (function () {
    function PageModel(page) {
        this.response = page;
        mobx.makeAutoObservable(this);
    }
    Object.defineProperty(PageModel.prototype, "channelId", {
        get: function () {
            return this.response.channelId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "chapterId", {
        get: function () {
            return this.response.chapterId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "content", {
        get: function () {
            return this.response.content;
        },
        set: function (data) {
            this.response.content = data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "createdDate", {
        get: function () {
            return this.response.createdDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "createdUserId", {
        get: function () {
            return this.response.createdUserId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "deletedDate", {
        get: function () {
            return this.response.deletedDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "editingUserId", {
        get: function () {
            return this.response.editingUserId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "favorite", {
        get: function () {
            return this.response.favorite;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "fileList", {
        get: function () {
            return this.response.fileList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "id", {
        get: function () {
            return this.response.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "modifiedDate", {
        get: function () {
            return this.response.modifiedDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "name", {
        get: function () {
            return this.response.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "read", {
        get: function () {
            return this.response.read;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "restoreChapterId", {
        get: function () {
            return this.response.restoreChapterId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "shared", {
        get: function () {
            return this.response.shared;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "sharedDate", {
        get: function () {
            return this.response.shared ? this.response.createdDate : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "sharedRoomId", {
        get: function () {
            return this.response.sharedRoomId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "sharedUserId", {
        get: function () {
            return this.response.sharedUserId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "tagList", {
        get: function () {
            return this.response.tagList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "textContent", {
        get: function () {
            return this.response.textContent;
        },
        set: function (data) {
            this.response.textContent = data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "type", {
        get: function () {
            return this.response.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "updatedUserId", {
        get: function () {
            return this.response.updatedUserId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "userName", {
        get: function () {
            return this.response.userName;
        },
        enumerable: false,
        configurable: true
    });
    return PageModel;
}());

var TagModel = /** @class */ (function () {
    function TagModel(tag) {
        this.response = tag;
        mobx.makeAutoObservable(this);
    }
    Object.defineProperty(TagModel.prototype, "id", {
        get: function () {
            return this.response.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagModel.prototype, "name", {
        get: function () {
            return this.response.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagModel.prototype, "pageId", {
        get: function () {
            return this.response.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagModel.prototype, "tagCount", {
        get: function () {
            return this.response.tagCount;
        },
        enumerable: false,
        configurable: true
    });
    return TagModel;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var bind = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

var utils = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
var buildURL = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

var InterceptorManager_1 = InterceptorManager;

var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
var enhanceError = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};

var transitional = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
var createError = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
var settle = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

var cookies = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
var isAbsoluteURL = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
var combineURLs = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
var buildFullPath = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

var isURLSameOrigin = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

var Cancel_1 = Cancel;

var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional$1 = config.transitional || transitional;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional$1.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel_1('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = ms;
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

var common = setup;

/* eslint-env browser */

var browser = createCommonjsModule(function (module, exports) {
/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = common(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};
});

var hasFlag = (flag, argv) => {
	argv = argv || process.argv;
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const pos = argv.indexOf(prefix + flag);
	const terminatorPos = argv.indexOf('--');
	return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};

const env = process.env;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false')) {
	forceColor = false;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = true;
}
if ('FORCE_COLOR' in env) {
	forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	if (forceColor === false) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor !== true) {
		return 0;
	}

	const min = forceColor ? 1 : 0;

	if (process.platform === 'win32') {
		// Node.js 7.5.0 is the first version of Node.js to include a patch to
		// libuv that enables 256 color output on Windows. Anything earlier and it
		// won't work. However, here we target Node.js 8 at minimum as it is an LTS
		// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		// release that supports 256 colors. Windows 10 build 14931 is the first release
		// that supports 16m/TrueColor.
		const osRelease = os__default["default"].release().split('.');
		if (
			Number(process.versions.node.split('.')[0]) >= 8 &&
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	if (env.TERM === 'dumb') {
		return min;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream);
	return translateLevel(level);
}

var supportsColor_1 = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel(process.stdout),
	stderr: getSupportLevel(process.stderr)
};

/**
 * Module dependencies.
 */

var node = createCommonjsModule(function (module, exports) {
/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util__default["default"].deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = supportsColor_1;

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty__default["default"].isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util__default["default"].format(...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = common(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util__default["default"].inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util__default["default"].inspect(v, this.inspectOpts);
};
});

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

var src = createCommonjsModule(function (module) {
if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
	module.exports = browser;
} else {
	module.exports = node;
}
});

var debug;

var debug_1 = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = src("follow-redirects");
    }
    catch (error) { /* */ }
    if (typeof debug !== "function") {
      debug = function () { /* */ };
    }
  }
  debug.apply(null, arguments);
};

var URL = url__default["default"].URL;


var Writable = require$$0__default["default"].Writable;



// Create handlers that pass events from native requests
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});

// Error types with codes
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded"
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    self._processResponse(response);
  };

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  abortRequest(this._currentRequest);
  this.emit("abort");
};

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  }

  // Validate input and shift parameters if necessary
  if (!(typeof data === "string" || typeof data === "object" && ("length" in data))) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  }
  else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  }

  // Write data if needed and end
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  }
  else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this;

  // Destroys the socket on timeout
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }

  // Sets up a timer to trigger a timeout event
  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }
    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }

  // Stops a timeout from triggering
  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    }

    // Clean up all attached listeners
    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);
    if (callback) {
      self.removeListener("timeout", callback);
    }
    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  }

  // Attach callback if passed
  if (callback) {
    this.on("timeout", callback);
  }

  // Start the timer if or when the socket is opened
  if (this.socket) {
    startTimer(this.socket);
  }
  else {
    this._currentRequest.once("socket", startTimer);
  }

  // Clean up on events
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);

  return this;
};

// Proxy all other public ClientRequest methods
[
  "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  }

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};


// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.substr(0, protocol.length - 1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  this._currentUrl = url__default["default"].format(this._options);

  // Set up event handlers
  request._redirectable = this;
  for (var e = 0; e < events.length; e++) {
    request.on(events[e], eventHandlers[events[e]]);
  }

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end.
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      // Only write if this request has not been redirected yet
      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors
        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        }
        // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        }
        // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.

  // If the response is not a redirect; return it as-is
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false ||
      statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
    return;
  }

  // The response is a redirect, so abort the current request
  abortRequest(this._currentRequest);
  // Discard the remainder of the response to avoid waiting for data
  response.destroy();

  // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).
  if (++this._redirectCount > this._options.maxRedirects) {
    this.emit("error", new TooManyRedirectsError());
    return;
  }

  // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    // Drop a possible entity and headers related to it
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }

  // Drop the Host header, as the redirect might lead to a different host
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

  // If the redirect is relative, carry over the host of the last request
  var currentUrlParts = url__default["default"].parse(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
    url__default["default"].format(Object.assign(currentUrlParts, { host: currentHost }));

  // Determine the URL of the redirection
  var redirectUrl;
  try {
    redirectUrl = url__default["default"].resolve(currentUrl, location);
  }
  catch (cause) {
    this.emit("error", new RedirectionError(cause));
    return;
  }

  // Create the redirected request
  debug_1("redirecting to", redirectUrl);
  this._isRedirect = true;
  var redirectUrlParts = url__default["default"].parse(redirectUrl);
  Object.assign(this._options, redirectUrlParts);

  // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain
  if (redirectUrlParts.protocol !== currentUrlParts.protocol &&
     redirectUrlParts.protocol !== "https:" ||
     redirectUrlParts.host !== currentHost &&
     !isSubdomain(redirectUrlParts.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  }

  // Evaluate the beforeRedirect callback
  if (typeof this._options.beforeRedirect === "function") {
    var responseDetails = { headers: response.headers };
    try {
      this._options.beforeRedirect.call(null, this._options, responseDetails);
    }
    catch (err) {
      this.emit("error", err);
      return;
    }
    this._sanitizeOptions(this._options);
  }

  // Perform the redirected request
  try {
    this._performRequest();
  }
  catch (cause) {
    this.emit("error", new RedirectionError(cause));
  }
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    function request(input, options, callback) {
      // Parse parameters
      if (typeof input === "string") {
        var urlStr = input;
        try {
          input = urlToOptions(new URL(urlStr));
        }
        catch (err) {
          /* istanbul ignore next */
          input = url__default["default"].parse(urlStr);
        }
      }
      else if (URL && (input instanceof URL)) {
        input = urlToOptions(input);
      }
      else {
        callback = options;
        options = input;
        input = { protocol: protocol };
      }
      if (typeof options === "function") {
        callback = options;
        options = null;
      }

      // Set defaults
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength,
      }, input, options);
      options.nativeProtocols = nativeProtocols;

      assert__default["default"].equal(options.protocol, protocol, "protocol mismatch");
      debug_1("options", options);
      return new RedirectableRequest(options, callback);
    }

    // Executes a GET request, following redirects
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }

    // Expose the properties on the wrapped protocol
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true },
    });
  });
  return exports;
}

/* istanbul ignore next */
function noop() { /* empty */ }

// from https://github.com/nodejs/node/blob/master/lib/internal/url.js
function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ?
      /* istanbul ignore next */
      urlObject.hostname.slice(1, -1) :
      urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href,
  };
  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }
  return options;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return (lastValue === null || typeof lastValue === "undefined") ?
    undefined : String(lastValue).trim();
}

function createErrorType(code, defaultMessage) {
  function CustomError(cause) {
    Error.captureStackTrace(this, this.constructor);
    if (!cause) {
      this.message = defaultMessage;
    }
    else {
      this.message = defaultMessage + ": " + cause.message;
      this.cause = cause;
    }
  }
  CustomError.prototype = new Error();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  CustomError.prototype.code = code;
  return CustomError;
}

function abortRequest(request) {
  for (var e = 0; e < events.length; e++) {
    request.removeListener(events[e], eventHandlers[events[e]]);
  }
  request.on("error", noop);
  request.abort();
}

function isSubdomain(subdomain, domain) {
  const dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}

// Exports
var followRedirects = wrap({ http: http__default["default"], https: https__default["default"] });
var wrap_1 = wrap;
followRedirects.wrap = wrap_1;

var data = {
  "version": "0.26.1"
};

var httpFollow = followRedirects.http;
var httpsFollow = followRedirects.https;


var VERSION$1 = data.version;





var isHttps = /https:?/;

/**
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} proxy
 * @param {string} location
 */
function setProxy(options, proxy, location) {
  options.hostname = proxy.host;
  options.host = proxy.host;
  options.port = proxy.port;
  options.path = location;

  // Basic proxy authorization
  if (proxy.auth) {
    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
  }

  // If a proxy is used, any redirects must also pass through the proxy
  options.beforeRedirect = function beforeRedirect(redirection) {
    redirection.headers.host = redirection.host;
    setProxy(redirection, proxy, redirection.href);
  };
}

/*eslint consistent-return:0*/
var http_1 = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }
    var resolve = function resolve(value) {
      done();
      resolvePromise(value);
    };
    var rejected = false;
    var reject = function reject(value) {
      done();
      rejected = true;
      rejectPromise(value);
    };
    var data = config.data;
    var headers = config.headers;
    var headerNames = {};

    Object.keys(headers).forEach(function storeLowerName(name) {
      headerNames[name.toLowerCase()] = name;
    });

    // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69
    if ('user-agent' in headerNames) {
      // User-Agent is specified; handle case where no UA header is desired
      if (!headers[headerNames['user-agent']]) {
        delete headers[headerNames['user-agent']];
      }
      // Otherwise, use specified value
    } else {
      // Only set header if it hasn't been set in config
      headers['User-Agent'] = 'axios/' + VERSION$1;
    }

    if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) ; else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(createError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          config
        ));
      }

      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(createError('Request body larger than maxBodyLength limit', config));
      }

      // Add Content-Length header if data exists
      if (!headerNames['content-length']) {
        headers['Content-Length'] = data.length;
      }
    }

    // HTTP basic authentication
    var auth = undefined;
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    }

    // Parse url
    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url__default["default"].parse(fullPath);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth && headerNames.authorization) {
      delete headers[headerNames.authorization];
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    try {
      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, '');
    } catch (err) {
      var customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      reject(customErr);
    }

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;
    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
      if (proxyUrl) {
        var parsedProxyUrl = url__default["default"].parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });

          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }
            if (proxyElement === '*') {
              return true;
            }
            if (proxyElement[0] === '.' &&
                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }

        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port,
            protocol: parsedProxyUrl.protocol
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https__default["default"] : http__default["default"];
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }

    // Create the request
    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return;

      // uncompress the response body transparently if required
      var stream = res;

      // return the last request in case of redirects
      var lastRequest = res.req || req;


      // if no content, is HEAD request or decompress disabled we should not decompress
      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
        switch (res.headers['content-encoding']) {
        /*eslint default-case:0*/
        case 'gzip':
        case 'compress':
        case 'deflate':
        // add the unzipper to the body stream processing pipeline
          stream = stream.pipe(zlib__default["default"].createUnzip());

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        }
      }

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        var totalResponseBytes = 0;
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destoy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            stream.destroy();
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              config, null, lastRequest));
          }
        });

        stream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }
          stream.destroy();
          reject(createError('error request aborted', config, 'ERR_REQUEST_ABORTED', lastRequest));
        });

        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });

        stream.on('end', function handleStreamEnd() {
          try {
            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (config.responseType !== 'arraybuffer') {
              responseData = responseData.toString(config.responseEncoding);
              if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                responseData = utils.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            reject(enhanceError(err, config, err.code, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
      reject(enhanceError(err, config, null, req));
    });

    // set tcp keep alive to prevent drop connection by peer
    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    });

    // Handle request timeout
    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      var timeout = parseInt(config.timeout, 10);

      if (isNaN(timeout)) {
        reject(createError(
          'error trying to parse `config.timeout` to int',
          config,
          'ERR_PARSE_TIMEOUT',
          req
        ));

        return;
      }

      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(timeout, function handleRequestTimeout() {
        req.abort();
        var timeoutErrorMessage = '';
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        } else {
          timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
        }
        var transitional$1 = config.transitional || transitional;
        reject(createError(
          timeoutErrorMessage,
          config,
          transitional$1.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
          req
        ));
      });
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (req.aborted) return;

        req.abort();
        reject(!cancel || (cancel && cancel.type) ? new Cancel_1('canceled') : cancel);
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }


    // Send the request
    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = xhr;
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = http_1;
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitional,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

var defaults_1 = defaults;

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
var transformData = function transformData(data, headers, fns) {
  var context = this || defaults_1;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};

var isCancel = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel_1('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
var dispatchRequest = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults_1.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
var mergeConfig = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};

var VERSION = data.version;

var validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

var validator = {
  assertOptions: assertOptions,
  validators: validators$1
};

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager_1(),
    response: new InterceptorManager_1()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

var Axios_1 = Axios;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel_1(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

var CancelToken_1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
var spread = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
var isAxiosError = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios_1(defaultConfig);
  var instance = bind(Axios_1.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios_1.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios$1 = createInstance(defaults_1);

// Expose Axios class to allow class inheritance
axios$1.Axios = Axios_1;

// Expose Cancel & CancelToken
axios$1.Cancel = Cancel_1;
axios$1.CancelToken = CancelToken_1;
axios$1.isCancel = isCancel;
axios$1.VERSION = data.version;

// Expose all/spread
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = spread;

// Expose isAxiosError
axios$1.isAxiosError = isAxiosError;

var axios_1 = axios$1;

// Allow use of default import syntax in TypeScript
var _default = axios$1;
axios_1.default = _default;

var axios = axios_1;

var baseUrl = 'http://192.168.151.53:8282'; // for test
var prefix = '/apis/v1';
var NoteViewType;
(function (NoteViewType) {
    NoteViewType["MyNote"] = "MyNote";
    NoteViewType["TalkNote"] = "TalkNote";
    NoteViewType["SharedNote"] = "SharedNote";
})(NoteViewType || (NoteViewType = {}));
var SelectType;
(function (SelectType) {
    SelectType["Checkbox"] = "Checkbox";
    SelectType["Radio"] = "Radio";
})(SelectType || (SelectType = {}));
var MenuType;
(function (MenuType) {
    MenuType["TALKROOM"] = "talk";
    MenuType["CHAPTER"] = "chapter";
    MenuType["PAGE"] = "page";
    MenuType["TAG"] = "tag";
})(MenuType || (MenuType = {}));

var API = /** @class */ (function () {
    function API() {
        this.instance = axios.create({
            baseURL: baseUrl,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Content-Type': 'application/json',
            },
            // withCredentials: true, // 인증정보 담아서 줄 때
        });
        this.instance.interceptors.response.use(function (response) {
            return response.data;
        }, function (error) {
            return Promise.reject(error);
        });
    }
    API.prototype.get = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.instance.get(url, config)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    API.prototype.post = function (url, payload, config) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.instance.post(url, payload, config)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    API.prototype.put = function (url, payload, config) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.instance.put(url, payload, config)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    API.prototype.delete = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.instance.delete(url, config)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return API;
}());

var ChapterRepo = /** @class */ (function () {
    function ChapterRepo() {
        this.API = new API();
    }
    ChapterRepo.prototype.getChapterList = function (channelId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId))];
                    case 1:
                        res = _b.sent();
                        if (res.success)
                            return [2 /*return*/, (_a = res.response) === null || _a === void 0 ? void 0 : _a.map(function (chapter) { return new ChapterModel(chapter) || []; })];
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.getChapterInfoList = function (chapterId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter/").concat(chapterId))];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, new ChapterModel(res.response)];
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(JSON.stringify(e_2));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.createShareChapter = function (chapterList, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.API.post("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter/share"), {
                            chapterList: chapterList,
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ChapterRepo.prototype.createChapter = function (dto, language, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.post("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter?language=").concat(language), dto.response)];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, new ChapterModel(res.response)];
                        return [3 /*break*/, 3];
                    case 2:
                        e_3 = _a.sent();
                        throw Error(JSON.stringify(e_3));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // async createEmptyChapter(dto: ChapterDTO) {
    //   try {
    //     const res = await this.API.post(`${prefix}/children/none}/notebooks`, {
    //       dto,
    //     });
    //     return data;
    //   } catch (e) {
    //     throw Error(JSON.stringify(e));
    //   }
    // }
    // async deleteChapter(
    //   chapterList: ChapterDTO[],
    //   channelId: ChannelId,
    //   chapterId: ChapterId,
    // ) {
    //   try {
    //     const res = await this.API.delete(
    //       `${prefix}/app/${channelId}/chapter/${chapterId}`,
    //       chapterList,
    //     );
    //   } catch (e) {
    //     throw Error(JSON.stringify(e));
    //   }
    // }
    // async deleteChapter(
    //   chapterList: ChapterDTO[],
    //   channelId: ChannelId,
    //   chapterId: ChapterId,
    // ) {
    //   try {
    //     const res = await this.API.delete(
    //       `${prefix}/app/${channelId}/chapter/${chapterId}`,
    //       {
    //         dto,
    //       },
    //     );
    //   } catch (e) {
    //     throw Error(JSON.stringify(e));
    //   }
    // }
    ChapterRepo.prototype.updateChapter = function (dto, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.put("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter"), dto.response)];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, new ChapterModel(res.response)];
                        return [3 /*break*/, 3];
                    case 2:
                        e_4 = _a.sent();
                        throw Error(JSON.stringify(e_4));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ChapterRepo;
}());
var ChapterRepoImpl = new ChapterRepo();

var FileRepo = /** @class */ (function () {
    function FileRepo() {
        this.prefix = 'note-api';
        this.storagePrefix = 'Storage';
        this.gatewayPrefix = 'gateway-api';
        this.drivePrefix = 'drive-api';
        // async createFileMeta(targetList) {
        //   return API.post(`${this.prefix}/noteFileMeta`, {
        //     dto: {
        //       fileList: targetList,
        //     },
        //   });
        // }
        // async storageFileDeepCopy(fileId, workspaceId, channelId, userId) {
        //   const targetSRC = `${this.storagePrefix}/StorageFile?action=Copy&Type=Deep`;
        //   try {
        //     return API.put(targetSRC, {
        //       dto: {
        //         workspace_id: workspaceId,
        //         channel_id: channelId,
        //         storageFileInfo: {
        //           user_id: userId,
        //           file_id: fileId,
        //         },
        //       },
        //     });
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
        // async createUploadMeta(dto) {
        //   try {
        //     return API.post(`${this.prefix}/noteFile`, dto);
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
        // async createUploadStorage(
        //   fileId,
        //   file,
        //   onUploadProgress,
        //   workspaceId,
        //   channelId,
        //   userId,
        // ) {
        //   try {
        //     return API.post(
        //       `${this.storagePrefix}/StorageFile?action=Create&fileID=${fileId}&workspaceID=${workspaceId}&channelID=${channelId}&userID=${userId}`,
        //       file,
        //       {
        //         headers: {
        //           'content-type': 'multipart/form-data',
        //         },
        //         xhrFields: {
        //           withCredentials: true,
        //         },
        //         onUploadProgress,
        //       },
        //     );
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
        // async uploadFileGW(
        //   file,
        //   fileName,
        //   fileExtension,
        //   location,
        //   onUploadProgress,
        //   cancelSource,
        //   channelId,
        //   pageId,
        // ) {
        //   const uploadFile = new File([file], `${fileName}.${fileExtension}`);
        //   return API.post(
        //     `/${this.gatewayPrefix}/upload?channel=${channelId}&name=${fileName}&ext=${fileExtension}&location=${location}&dir=` +
        //       `${pageId}`,
        //     uploadFile,
        //     {
        //       headers: {
        //         'content-type': 'multipart/form-data',
        //       },
        //       xhrFields: {
        //         withCredentials: true,
        //       },
        //       onUploadProgress,
        //       cancelToken: cancelSource.token,
        //     },
        //   );
        // }
        // async deleteFile(deleteFileId, channelId) {
        //   try {
        //     return await API.post(`${this.prefix}/noteFile?action=Delete`, {
        //       dto: {
        //         type: 'hard',
        //         file: [
        //           {
        //             channel: channelId,
        //             file_parent_id: channelId,
        //             file_id: deleteFileId,
        //             is_folder: 'N',
        //           },
        //         ],
        //       },
        //     });
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
        // deleteAllFile(fileList, channelId) {
        //   const deleteFileList = [];
        //   if (fileList) {
        //     fileList.forEach(file => {
        //       deleteFileList.push({
        //         channel: channelId,
        //         file_parent_id: channelId,
        //         file_id: file.file_id,
        //         is_folder: 'N',
        //       });
        //     });
        //     return API.post(`${this.drivePrefix}/files?action=Delete`, {
        //       dto: {
        //         type: 'hard',
        //         file: deleteFileList,
        //       },
        //     });
        //   }
        //   return Promise.resolve();
        // }
        // async getStorageVolume() {
        //   try {
        //     return API.get(`/${this.storagePrefix}/StorageVolumeDomain`);
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
        // async getDuplicateFile(fileName, fileExt, pageId) {
        //   let query = `/${this.drivePrefix}/files/${pageId}?`;
        //   query += `type=0`;
        //   query += `&name=${fileName}`;
        //   if (fileExt) query += `&ext=${fileExt}`;
        //   try {
        //     return API.get(query);
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
        // async getRecycleBinAllFile(channelId) {
        //   try {
        //     return await API.get(
        //       `${this.prefix}/noteRecycleBinFile?action=List&note_channel_id=${channelId}`,
        //     );
        //   } catch (e) {
        //     throw Error(JSON.stringify(e));
        //   }
        // }
    }
    return FileRepo;
}());
var FileRepoImpl = new FileRepo();

var PageRepo = /** @class */ (function () {
    function PageRepo() {
        this.API = new API();
    }
    PageRepo.prototype.getAllPageList = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/page/all"))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.getRecentList = function (channelId, num) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var query, res, e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        query = num ? "?count=".concat(num) : '';
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/page").concat(query))];
                    case 2:
                        res = _b.sent();
                        if (res.success)
                            return [2 /*return*/, (_a = res.response) === null || _a === void 0 ? void 0 : _a.map(function (page) { return new PageModel(page) || []; })];
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _b.sent();
                        throw Error(JSON.stringify(e_2));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.getPageInfoList = function (pageId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/page/").concat(pageId))];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, new PageModel(res.response)];
                        return [3 /*break*/, 3];
                    case 2:
                        e_3 = _a.sent();
                        throw Error(JSON.stringify(e_3));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.createPage = function (channelId, chapterId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, this.API.post("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter/").concat(chapterId, "/page"), {
                            dto: dto,
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    // 단일 페이지 삭제
    PageRepo.prototype.deletePage = function (channelId, chapterId, pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.delete("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter/").concat(chapterId, "/page/").concat(pageId))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_4 = _a.sent();
                        throw Error(JSON.stringify(e_4));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.updatePage = function (channelId, chapterId, action, dto, isNewPage) {
        if (isNewPage === void 0) { isNewPage = false; }
        return __awaiter(this, void 0, void 0, function () {
            var res, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.put("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/chapter/").concat(chapterId, "/page?action=").concat(action, "&isNewPage=").concat(isNewPage), dto.response)];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, new PageModel(res)];
                        return [3 /*break*/, 3];
                    case 2:
                        e_5 = _a.sent();
                        throw Error(JSON.stringify(e_5));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.createSharePage = function (channelId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.API.post("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/page/copy"), {
                        dto: dto,
                    })];
            });
        });
    };
    PageRepo.prototype.updateRecyclePage = function (channelId, action, dto) {
        return __awaiter(this, void 0, void 0, function () {
            var req, res, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        req = dto.map(function (page) { return page.response; });
                        return [4 /*yield*/, this.API.put("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/page/recycle?action=").concat(action), req)];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, new PageModel(res.response)];
                        return [3 /*break*/, 3];
                    case 2:
                        e_6 = _a.sent();
                        throw Error(JSON.stringify(e_6));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.bookmarkPage = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.post("".concat(baseUrl).concat(prefix, "/page/").concat(pageId, "/bookmark"))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_7 = _a.sent();
                        throw Error(JSON.stringify(e_7));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.unbookmarkPage = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.delete("".concat(baseUrl).concat(prefix, "/page/").concat(pageId, "/bookmark"))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_8 = _a.sent();
                        throw Error(JSON.stringify(e_8));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.getBookmarkInChannel = function (channelId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, e_9;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/bookmark"))];
                    case 1:
                        res = _b.sent();
                        if (res.success)
                            return [2 /*return*/, (_a = res.response) === null || _a === void 0 ? void 0 : _a.map(function (page) { return new PageModel(page) || []; })];
                        return [3 /*break*/, 3];
                    case 2:
                        e_9 = _b.sent();
                        throw Error(JSON.stringify(e_9));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.getBookmarkInUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/bookmark"))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_10 = _a.sent();
                        throw Error(JSON.stringify(e_10));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return PageRepo;
}());
var PageRepoImpl = new PageRepo();

var SearchRepo = /** @class */ (function () {
    function SearchRepo() {
        this.API = new API();
    }
    SearchRepo.prototype.getSearchList = function (searchKey, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/search?text=").concat(searchKey))];
                    case 1:
                        res = _a.sent();
                        if (res.success)
                            return [2 /*return*/, res.response];
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return SearchRepo;
}());
var SearchRepoImpl = new SearchRepo();

var TagRepo = /** @class */ (function () {
    function TagRepo() {
        this.API = new API();
    }
    TagRepo.prototype.getAllTagList = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/tag"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.response];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TagRepo.prototype.getTagList = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/page/").concat(pageId, "/tag"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.response];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(JSON.stringify(e_2));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TagRepo.prototype.getTagPageList = function (tagId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.get("".concat(baseUrl).concat(prefix, "/app/").concat(channelId, "/tag/").concat(tagId, "/page"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.response];
                    case 2:
                        e_3 = _a.sent();
                        throw Error(JSON.stringify(e_3));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TagRepo.prototype.createTag = function (pageId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            var res, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.API.post("".concat(baseUrl).concat(prefix, "/page/").concat(pageId, "/tag"), {
                                dto: dto,
                            })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.response];
                    case 2:
                        e_4 = _a.sent();
                        throw Error(JSON.stringify(e_4));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TagRepo.prototype.deleteTag = function (pageId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, this.API.delete("".concat(baseUrl).concat(prefix, "/page/").concat(pageId, "/tag"), {
                            dto: dto,
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    TagRepo.prototype.updateTag = function (pageId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.API.put("".concat(baseUrl).concat(prefix, "/page/").concat(pageId, "/tag"), {
                        dto: dto,
                    });
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    return TagRepo;
}());
var TagRepoImpl = new TagRepo();

var ChapterType;
(function (ChapterType) {
    ChapterType["DEFAULT"] = "DEFAULT";
    ChapterType["NOTEBOOK"] = "NOTEBOOK";
    ChapterType["SHARED_PAGE"] = "SHARED_PAGE";
    ChapterType["SHARED"] = "SHARED";
    ChapterType["RECYCLE_BIN"] = "RECYCLE_BIN";
})(ChapterType || (ChapterType = {}));

var ChapterStore = /** @class */ (function () {
    function ChapterStore(rootStore) {
        this.headerTitle = '';
        mobx.makeAutoObservable(this);
        this.rootStore = rootStore;
        this.repo = ChapterRepoImpl;
    }
    ChapterStore.prototype.setHeaderTitle = function (title) {
        this.headerTitle = title;
    };
    ChapterStore.prototype.getChapterList = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var chapters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getChapterList(channelId)];
                    case 1:
                        chapters = _a.sent();
                        return [2 /*return*/, this.sortChapterList(chapters)];
                }
            });
        });
    };
    ChapterStore.prototype.sortChapterList = function (chapters) {
        return __awaiter(this, void 0, void 0, function () {
            var normal, shared, recycle;
            return __generator(this, function (_a) {
                normal = chapters.filter(function (chapter) { return chapter.type === ChapterType.NOTEBOOK; });
                shared = chapters.filter(function (chapter) { return chapter.type === ChapterType.SHARED && ChapterType.SHARED_PAGE; });
                recycle = chapters.filter(function (chapter) { return chapter.type === ChapterType.RECYCLE_BIN; });
                return [2 /*return*/, { normal: normal, shared: shared, recycle: recycle }];
            });
        });
    };
    ChapterStore.prototype.getChapterInfoList = function (chapterId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getChapterInfoList(chapterId, channelId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ChapterStore.prototype.createChapter = function (dto, language, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.createChapter(dto, language, channelId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ChapterStore.prototype.renameChapter = function (dto, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.updateChapter(dto, channelId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Object.defineProperty(ChapterStore.prototype, "RandomColor", {
        get: function () {
            var colorArray = [
                '#C84847',
                '#F29274',
                '#F6C750',
                '#77B69B',
                '#679886',
                '#3A7973',
                '#77BED3',
                '#5C83DA',
                '#8F91E7',
                '#DF97AA',
                '#CA6D6D',
            ];
            return colorArray[Math.floor(Math.random() * colorArray.length)];
        },
        enumerable: false,
        configurable: true
    });
    return ChapterStore;
}());

var NoteStore = /** @class */ (function () {
    function NoteStore(rootStore) {
        this.headerTitle = '';
        mobx.makeAutoObservable(this);
        this.rootStore = rootStore;
        this.searchRepo = SearchRepoImpl;
    }
    NoteStore.prototype.getSearchList = function (searchKey, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchRepo.getSearchList(searchKey, channelId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return NoteStore;
}());

var NoteViewStore = /** @class */ (function () {
    function NoteViewStore(rootStore) {
        this.isLongPressed = false;
        this.type = NoteViewType.MyNote;
        mobx.makeAutoObservable(this);
        this.rootStore = rootStore;
    }
    NoteViewStore.prototype.toggleMultiSelectMode = function () {
        this.isLongPressed = !this.isLongPressed;
    };
    NoteViewStore.prototype.setType = function (type) {
        this.type = type;
    };
    return NoteViewStore;
}());

var Action;
(function (Action) {
    Action["EDITING"] = "EDITING";
    Action["EDIT_DONE"] = "EDIT_DONE";
    Action["EDIT_START"] = "EDIT_START";
    Action["MOVE"] = "MOVE";
    Action["NON_EDIT"] = "NON_EDIT";
    Action["RENAME"] = "RENAME";
    Action["RESTORE"] = "RESTORE";
    Action["THROW"] = "THROW";
})(Action || (Action = {}));

var PageStore = /** @class */ (function () {
    function PageStore(rootStore) {
        this.isLongPressed = false;
        this.pageInfo = new PageModel({});
        mobx.makeAutoObservable(this);
        this.rootStore = rootStore;
        this.repo = PageRepoImpl;
    }
    PageStore.prototype.changeMode = function () {
        this.isLongPressed = !this.isLongPressed;
    };
    PageStore.prototype.getBookmarkInChannel = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getBookmarkInChannel(channelId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.fetchPageInfoList = function (pageId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getPageInfoList(pageId, channelId)];
                    case 1:
                        res = _a.sent();
                        this.pageInfo = res;
                        return [2 /*return*/];
                }
            });
        });
    };
    PageStore.prototype.getRecentList = function (channelId, num) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getRecentList(channelId, num)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.renamePage = function (channelId, chapterId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.updatePage(channelId, chapterId, Action.RENAME, dto)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.throwPage = function (channelId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.updateRecyclePage(channelId, Action.THROW, dto)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.restorePage = function (channelId, dto) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.updateRecyclePage(channelId, Action.RESTORE, dto)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.bookmarkPage = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.bookmarkPage(pageId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.unbookmarkPage = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.unbookmarkPage(pageId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PageStore.prototype.savePage = function (channelId, chapterId, dto, isNewPage) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.updatePage(channelId, chapterId, Action.EDIT_DONE, dto, isNewPage)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return PageStore;
}());

var TagStore = /** @class */ (function () {
    function TagStore(rootStore) {
        this.sortedTagList = { KOR: null, ENG: null, NUM: null, ETC: null };
        this.pageTagList = [];
        mobx.makeAutoObservable(this);
        this.repo = TagRepoImpl;
        this.rootStore = rootStore;
    }
    TagStore.prototype.fetchSortedTagList = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.repo.getAllTagList(channelId)];
                    case 1:
                        _a.sortedTagList = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TagStore.prototype.fetchPageTagList = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getTagList(pageId)];
                    case 1:
                        res = _a.sent();
                        this.pageTagList = res.map(function (tag) {
                            return new TagModel(tag);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    TagStore.prototype.fetchTagPageList = function (tagId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.getTagPageList(tagId, channelId)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.map(function (page) { return new PageModel(page); })];
                }
            });
        });
    };
    TagStore.prototype.createTag = function (pageId, tagName) {
        return __awaiter(this, void 0, void 0, function () {
            var dto, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dto = [{ pageId: pageId, name: tagName }];
                        return [4 /*yield*/, this.repo.createTag(pageId, dto)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    TagStore.prototype.deleteTag = function (pageId, tagId) {
        return __awaiter(this, void 0, void 0, function () {
            var dto;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dto = [{ id: tagId, pageId: pageId }];
                        return [4 /*yield*/, this.repo.deleteTag(pageId, dto)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TagStore.prototype.updateTag = function (pageId, tagId, newTagName) {
        return __awaiter(this, void 0, void 0, function () {
            var dto;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dto = [{ id: tagId, name: newTagName, pageId: pageId }];
                        return [4 /*yield*/, this.repo.updateTag(pageId, dto)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return TagStore;
}());

var EditorStore = /** @class */ (function () {
    function EditorStore(rootStore) {
        mobx.makeAutoObservable(this);
        this.rootStore = rootStore;
    }
    EditorStore.prototype.setEditor = function (editorInstance) {
        this.tinymce = editorInstance;
    };
    return EditorStore;
}());

var UiStore = /** @class */ (function () {
    function UiStore(rootStore) {
        this.headerInfo = {};
        this.isSearching = false;
        mobx.makeAutoObservable(this);
        this.rootStore = rootStore;
    }
    UiStore.prototype.setHeaderInfo = function (headerInfo) {
        this.headerInfo = headerInfo;
    };
    UiStore.prototype.setHeaderTitle = function (title) {
        this.headerInfo.title = title;
    };
    UiStore.prototype.toggleSearchBar = function () {
        this.isSearching = !this.isSearching;
    };
    return UiStore;
}());

var RootStore = /** @class */ (function () {
    function RootStore() {
        this.noteViewStore = new NoteViewStore(this);
        this.chapterStore = new ChapterStore(this);
        this.pageStore = new PageStore(this);
        this.noteStore = new NoteStore(this);
        this.tagStore = new TagStore(this);
        this.editorStore = new EditorStore(this);
        this.uiStore = new UiStore(this);
    }
    return RootStore;
}());

var rootStore = new RootStore();
var RootStoreContext = React.createContext(rootStore);
var StoreProvider = function (_a) {
    var children = _a.children;
    return (React__default["default"].createElement(RootStoreContext.Provider, { value: rootStore }, children));
};
var useNoteStore = function () { return React.useContext(RootStoreContext); };

exports.ChapterModel = ChapterModel;
exports.ChapterRepo = ChapterRepo;
exports.ChapterRepoImpl = ChapterRepoImpl;
exports.ChapterStore = ChapterStore;
exports.FileRepo = FileRepo;
exports.FileRepoImpl = FileRepoImpl;
exports.NoteStore = NoteStore;
exports.NoteViewStore = NoteViewStore;
exports.PageModel = PageModel;
exports.PageRepo = PageRepo;
exports.PageRepoImpl = PageRepoImpl;
exports.PageStore = PageStore;
exports.RootStore = RootStore;
exports.SearchRepo = SearchRepo;
exports.SearchRepoImpl = SearchRepoImpl;
exports.StoreProvider = StoreProvider;
exports.TagModel = TagModel;
exports.TagRepo = TagRepo;
exports.TagRepoImpl = TagRepoImpl;
exports.TagStore = TagStore;
exports.useNoteCore = useNoteCore;
exports.useNoteI18nInit = useNoteI18nInit;
exports.useNoteStore = useNoteStore;
