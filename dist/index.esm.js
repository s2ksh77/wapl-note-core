import { useI18nInit, API } from 'teespace-core';
import i18next from 'i18next';
import { initReactI18next } from 'react-i18next';

var NOTE_PAGE_LIST_CMPNT_DEF_01$1 = "새 챕터";
var NOTE_PAGE_LIST_CMPNT_DEF_02$1 = "새 페이지";
var NOTE_PAGE_LIST_CMPNT_DEF_03$1 = "(제목 없음)";
var NOTE_PAGE_LIST_CMPNT_DEF_04$1 = "새 페이지 추가";
var NOTE_PAGE_LIST_CMPNT_DEF_05$1 = "페이지, 챕터 검색";
var NOTE_PAGE_LIST_CMPNT_DEF_06$1 = "태그";
var NOTE_PAGE_LIST_CMPNT_DEF_07$1 = "전달받은 페이지";
var NOTE_PAGE_LIST_CREATE_N_CHPT_01$1 = "중복된 이름이 있습니다.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_02$1 = "다른 이름을 입력하세요.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_03$1 = "확인";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_01$1 = "삭제할 수 없습니다.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_02$1 = "{{userName}} 님이 수정 중입니다.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_03$1 = "페이지를 삭제하시겠습니까?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_04$1 = "삭제";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_05$1 = "취소";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_06$1 = "챕터를 삭제하시겠습니까?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_07$1 = "챕터에 속한 페이지는 휴지통으로 이동됩니다.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_01$1 = "수정";
var NOTE_PAGE_LIST_ADD_NEW_PGE_02$1 = "읽기 모드";
var NOTE_PAGE_LIST_ADD_NEW_PGE_03$1 = "편집하려면 수정 버튼을 클릭해 주세요.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_04$1 = "저장";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_01$1 = "{{moveCnt}}개의 페이지를 {{targetPage}}(으)로 이동하였습니다.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_02$1 = "{{moveCnt}}개의 챕터가 이동하였습니다.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_03$1 = "{{moveCnt}}개의 페이지가 이동하였습니다.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01$1 = "페이지가 없습니다.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02$1 = "시작하려면 '새 페이지 추가' 버튼을 클릭하세요.";
var NOTE_EDIT_PAGE_WORK_AREA_DEF_01$1 = "(탈퇴한 멤버)";
var NOTE_EDIT_PAGE_SEARCH_01$1 = "검색 결과가 없습니다.";
var NOTE_EDIT_PAGE_SEARCH_02$1 = "검색 중...";
var NOTE_EDIT_PAGE_SEARCH_03$1 = "내용 검색";
var NOTE_EDIT_PAGE_INSERT_LINK_01$1 = "링크 삽입";
var NOTE_EDIT_PAGE_INSERT_LINK_02$1 = "완료";
var NOTE_EDIT_PAGE_INSERT_LINK_03$1 = "텍스트를 입력하세요.";
var NOTE_EDIT_PAGE_INSERT_LINK_04$1 = "텍스트";
var NOTE_EDIT_PAGE_INSERT_LINK_05$1 = "링크";
var NOTE_EDIT_PAGE_INSERT_LINK_06$1 = "해당 URL은 유효하지 않습니다.";
var NOTE_EDIT_PAGE_INSERT_LINK_07$1 = "링크 편집";
var NOTE_EDIT_PAGE_INSERT_LINK_08$1 = "링크 삭제";
var NOTE_EDIT_PAGE_ATTACH_FILE_01$1 = "Drive에서 첨부";
var NOTE_EDIT_PAGE_ATTACH_FILE_02$1 = "내 PC에서 첨부";
var NOTE_EDIT_PAGE_ATTACH_FILE_03$1 = "그룹 공간이 부족하여\\n 파일을 첨부할 수 없습니다.";
var NOTE_EDIT_PAGE_ATTACH_FILE_04$1 = "파일 첨부는 한 번에 최대 20GB까지 가능합니다.";
var NOTE_EDIT_PAGE_ATTACH_FILE_05$1 = "파일 첨부는 한 번에 30개까지 가능합니다.";
var NOTE_EDIT_PAGE_COMPLETE_01$1 = "페이지를 저장하고 나가시겠습니까?";
var NOTE_EDIT_PAGE_COMPLETE_02$1 = "저장 안 함";
var NOTE_DELIVER_CONTEXT_MENU_01$1 = "이름 변경";
var NOTE_DELIVER_CONTEXT_MENU_02$1 = "Mail로 전달";
var NOTE_DELIVER_CONTEXT_MENU_03$1 = "내보내기";
var NOTE_DELIVER_CONTEXT_MENU_04$1 = "정보 보기";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01$1 = "출처 룸";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02$1 = "전달한 멤버";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03$1 = "전달 날짜";
var NOTE_DELIVER_TO_ANOTHER_ROOM_01$1 = "별명 검색";
var NOTE_DELIVER_TO_ANOTHER_ROOM_02$1 = "룸";
var NOTE_DELIVER_TO_ANOTHER_ROOM_03$1 = "프렌즈";
var NOTE_DELIVER_TO_ANOTHER_ROOM_04$1 = "나에게";
var NOTE_DELIVER_TO_ANOTHER_ROOM_05$1 = "프렌즈/룸 목록에서\n선택해 주세요.";
var NOTE_DELIVER_TO_ANOTHER_ROOM_06$1 = "룸 이름, 멤버 검색";
var NOTE_DELIVER_TO_ANOTHER_ROOM_07$1 = "전달";
var NOTE_DELIVER_TO_ANOTHER_ROOM_08$1 = "즐겨찾기";
var NOTE_TAG_TAG_MENU_01$1 = "ㄱ~ㅎ";
var NOTE_TAG_TAG_MENU_02$1 = "A~Z";
var NOTE_TAG_TAG_MENU_03$1 = "0~9";
var NOTE_TAG_TAG_MENU_04$1 = "기타";
var NOTE_TAG_TAG_MENU_05$1 = "태그 검색";
var NOTE_TAG_NO_CONTENTS_01$1 = "태그가 없습니다.";
var NOTE_TAG_NO_CONTENTS_02$1 = "페이지 하단에 태그를 입력하여 추가하세요.";
var NOTE_EDIT_PAGE_MENUBAR_01$1 = "실행 취소";
var NOTE_EDIT_PAGE_MENUBAR_02$1 = "다시 실행";
var NOTE_EDIT_PAGE_MENUBAR_03$1 = "본문 스타일";
var NOTE_EDIT_PAGE_MENUBAR_04$1 = "폰트 종류";
var NOTE_EDIT_PAGE_MENUBAR_05$1 = "폰트 크기";
var NOTE_EDIT_PAGE_MENUBAR_06$1 = "글자색";
var NOTE_EDIT_PAGE_MENUBAR_07$1 = "배경색";
var NOTE_EDIT_PAGE_MENUBAR_08$1 = "볼드체";
var NOTE_EDIT_PAGE_MENUBAR_09$1 = "이탤릭체";
var NOTE_EDIT_PAGE_MENUBAR_10$1 = "밑줄체";
var NOTE_EDIT_PAGE_MENUBAR_11$1 = "왼쪽 정렬";
var NOTE_EDIT_PAGE_MENUBAR_12$1 = "가운데 정렬";
var NOTE_EDIT_PAGE_MENUBAR_13$1 = "오른쪽 정렬";
var NOTE_EDIT_PAGE_MENUBAR_14$1 = "양쪽 정렬";
var NOTE_EDIT_PAGE_MENUBAR_15$1 = "번호 매기기";
var NOTE_EDIT_PAGE_MENUBAR_16$1 = "글머리 기호";
var NOTE_EDIT_PAGE_MENUBAR_17$1 = "체크리스트";
var NOTE_EDIT_PAGE_MENUBAR_18$1 = "들여쓰기";
var NOTE_EDIT_PAGE_MENUBAR_19$1 = "내어쓰기";
var NOTE_EDIT_PAGE_MENUBAR_20$1 = "구분선";
var NOTE_EDIT_PAGE_MENUBAR_21$1 = "표";
var NOTE_EDIT_PAGE_MENUBAR_22$1 = "현재 시간 입력";
var NOTE_EDIT_PAGE_MENUBAR_23$1 = "이미지 삽입";
var NOTE_EDIT_PAGE_MENUBAR_24$1 = "파일 첨부";
var NOTE_EDIT_PAGE_MENUBAR_25$1 = "반시계 방향 90도 회전";
var NOTE_EDIT_PAGE_MENUBAR_26$1 = "시계 방향 90도 회전";
var NOTE_EDIT_PAGE_MENUBAR_27$1 = "상하 반전";
var NOTE_EDIT_PAGE_MENUBAR_28$1 = "좌우 반전";
var NOTE_EDIT_PAGE_MENUBAR_29$1 = "이미지 편집";
var NOTE_EDIT_PAGE_MENUBAR_30$1 = "이미지 교체";
var NOTE_EDIT_PAGE_MENUBAR_31$1 = "취소선";
var NOTE_EDIT_PAGE_INSERT_LINK_09$1 = "링크로 이동";
var NOTE_EDIT_PAGE_ADD_TAG_01$1 = "이미 존재하는 태그 이름입니다.";
var NOTE_PAGE_LIST_NO_CHPT_01$1 = "챕터가 없습니다.";
var NOTE_PAGE_LIST_NO_CHPT_02$1 = "시작하려면 '새 챕터' 버튼을 클릭하세요.";
var NOTE_EDIT_PAGE_MENUBAR_32$1 = "Drive에 저장";
var NOTE_EDIT_PAGE_MENUBAR_33$1 = "내 PC에 저장";
var NOTE_EDIT_PAGE_MENUBAR_34$1 = "다운로드";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_08$1 = "{{count}}명이 수정 중입니다.";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01$1 = "PDF 형식(.pdf)";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02$1 = "TXT 형식(.txt)";
var NOTE_EDIT_PAGE_ATTACH_FILE_06$1 = "일부 파일이 업로드되지 못하였습니다.";
var NOTE_EDIT_PAGE_ATTACH_FILE_07$1 = "({{uploadCnt}}개 항목 중 {{failCnt}}개 실패)";
var NOTE_EDIT_PAGE_ATTACH_FILE_08$1 = "업로드 중인 파일이 있습니다.\\n페이지를 저장하고 나가시겠습니까?";
var NOTE_EDIT_PAGE_ATTACH_FILE_09$1 = "업로드 완료된 파일은 페이지에 저장됩니다.";
var NOTE_EDIT_PAGE_INSERT_LINK_10$1 = "올바르지 않은 주소입니다.";
var NOTE_EDIT_PAGE_INSERT_LINK_11$1 = "텍스트를 입력해 주세요.";
var NOTE_EDIT_PAGE_INSERT_LINK_12$1 = "링크를 입력해 주세요.";
var NOTE_EDIT_PAGE_INSERT_LINK_13$1 = "이메일의 경우, 앞에 'mailto:'를 붙여주세요.";
var NOTE_EDIT_PAGE_AUTO_SAVE_01$1 = "저장 중";
var NOTE_EDIT_PAGE_AUTO_SAVE_02$1 = "저장되었습니다.";
var NOTE_EDIT_PAGE_CANT_EDIT_01$1 = "수정할 수 없습니다.";
var NOTE_ADD_TAGS_01$1 = "태그 추가";
var NOTE_ADD_TAGS_02$1 = "읽기 모드에서는 태그 추가를 할 수 없습니다.";
var NOTE_EDIT_PAGE_MENUBAR_35$1 = "정렬";
var NOTE_GUEST_01$1 = "게스트는 챕터 및 페이지를 편집할 수 없습니다.";
var NOTE_GUEST_02$1 = "게스트는 사용할 수 없는 기능입니다.";
var DRIVE_UPLOAD_BTN_04$1 = "파일명이 70자를 넘는 경우 업로드할 수 없습니다.";
var NOTE_EDIT_PAGE_UPDATE_TIME_01$1 = "오전 {{time}}";
var NOTE_EDIT_PAGE_UPDATE_TIME_02$1 = "오후 {{time}}";
var NOTE_EXPORT_TITLE$1 = "제목";
var NOTE_CONTEXT_MENU_01$1 = "다른 룸으로 전달";
var NOTE_CONTEXT_MENU_02$1 = "복원";
var NOTE_CONTEXT_MENU_03$1 = "휴지통 비우기";
var NOTE_DND_ACTION_01$1 = "이동이 불가능합니다.";
var NOTE_DND_ACTION_02$1 = "전달받은 챕터 및 페이지는 이동 불가능합니다.";
var NOTE_BIN_01$1 = "휴지통";
var NOTE_BIN_02$1 = "휴지통으로 이동되었습니다.";
var NOTE_BIN_03$1 = "{{num}}개의 페이지가 휴지통으로 이동되었습니다.";
var NOTE_BIN_04$1 = "챕터가 삭제되었습니다.";
var NOTE_BIN_05$1 = "휴지통에 있는 페이지는 30일 동안 보관되며 이후 휴지통에서 삭제됩니다.";
var NOTE_BIN_06$1 = "페이지를 영구 삭제하시겠습니까?";
var NOTE_BIN_07$1 = "삭제된 페이지는 복원할 수 없습니다.";
var NOTE_BIN_08$1 = "{{num}}개의 페이지를 영구 삭제하시겠습니까?";
var NOTE_BIN_RESTORE_01$1 = "복원될 챕터가 존재하지 않습니다. \n어느 챕터로 복원하시겠습니까?";
var NOTE_BIN_RESTORE_02$1 = "{{name}}(으)로 복원되었습니다.";
var NOTE_BIN_RESTORE_03$1 = "{{num}}개의 페이지가 복원되었습니다.";
var NOTE_EDIT_PAGE_MENUBAR_36$1 = "소스 코드";
var NOTE_RECOVER_DATA_01$1 = "작성 중인 페이지가 있습니다.\\n내용을 복원하시겠습니까?";
var NOTE_META_TAG_01$1 = "챕터";
var NOTE_META_TAG_02$1 = "페이지";
var NOTE_META_TAG_03$1 = "페이지가 삭제되어 불러올 수 없습니다.";
var NOTE_META_TAG_04$1 = "챕터가 삭제되어 불러올 수 없습니다.";
var NOTE_SAVE_PAGE$1 = "페이지가 저장되었습니다.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_09$1 = "전달받은 페이지는 영구 삭제됩니다.";
var NOTE_NOTICENTER_01$1 = "챕터를 공유했습니다.";
var NOTE_NOTICENTER_02$1 = "페이지를 공유했습니다.";
var NOTE_NOTICENTER_03$1 = "{{title}}을 생성했습니다.";
var ko = {
	NOTE_PAGE_LIST_CMPNT_DEF_01: NOTE_PAGE_LIST_CMPNT_DEF_01$1,
	NOTE_PAGE_LIST_CMPNT_DEF_02: NOTE_PAGE_LIST_CMPNT_DEF_02$1,
	NOTE_PAGE_LIST_CMPNT_DEF_03: NOTE_PAGE_LIST_CMPNT_DEF_03$1,
	NOTE_PAGE_LIST_CMPNT_DEF_04: NOTE_PAGE_LIST_CMPNT_DEF_04$1,
	NOTE_PAGE_LIST_CMPNT_DEF_05: NOTE_PAGE_LIST_CMPNT_DEF_05$1,
	NOTE_PAGE_LIST_CMPNT_DEF_06: NOTE_PAGE_LIST_CMPNT_DEF_06$1,
	NOTE_PAGE_LIST_CMPNT_DEF_07: NOTE_PAGE_LIST_CMPNT_DEF_07$1,
	NOTE_PAGE_LIST_CREATE_N_CHPT_01: NOTE_PAGE_LIST_CREATE_N_CHPT_01$1,
	NOTE_PAGE_LIST_CREATE_N_CHPT_02: NOTE_PAGE_LIST_CREATE_N_CHPT_02$1,
	NOTE_PAGE_LIST_CREATE_N_CHPT_03: NOTE_PAGE_LIST_CREATE_N_CHPT_03$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_01: NOTE_PAGE_LIST_DEL_PGE_CHPT_01$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_02: NOTE_PAGE_LIST_DEL_PGE_CHPT_02$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_03: NOTE_PAGE_LIST_DEL_PGE_CHPT_03$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_04: NOTE_PAGE_LIST_DEL_PGE_CHPT_04$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_05: NOTE_PAGE_LIST_DEL_PGE_CHPT_05$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_06: NOTE_PAGE_LIST_DEL_PGE_CHPT_06$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_07: NOTE_PAGE_LIST_DEL_PGE_CHPT_07$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_01: NOTE_PAGE_LIST_ADD_NEW_PGE_01$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_02: NOTE_PAGE_LIST_ADD_NEW_PGE_02$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_03: NOTE_PAGE_LIST_ADD_NEW_PGE_03$1,
	NOTE_PAGE_LIST_ADD_NEW_PGE_04: NOTE_PAGE_LIST_ADD_NEW_PGE_04$1,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_01: NOTE_PAGE_LIST_MOVE_PGE_CHPT_01$1,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_02: NOTE_PAGE_LIST_MOVE_PGE_CHPT_02$1,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_03: NOTE_PAGE_LIST_MOVE_PGE_CHPT_03$1,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01$1,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02$1,
	NOTE_EDIT_PAGE_WORK_AREA_DEF_01: NOTE_EDIT_PAGE_WORK_AREA_DEF_01$1,
	NOTE_EDIT_PAGE_SEARCH_01: NOTE_EDIT_PAGE_SEARCH_01$1,
	NOTE_EDIT_PAGE_SEARCH_02: NOTE_EDIT_PAGE_SEARCH_02$1,
	NOTE_EDIT_PAGE_SEARCH_03: NOTE_EDIT_PAGE_SEARCH_03$1,
	NOTE_EDIT_PAGE_INSERT_LINK_01: NOTE_EDIT_PAGE_INSERT_LINK_01$1,
	NOTE_EDIT_PAGE_INSERT_LINK_02: NOTE_EDIT_PAGE_INSERT_LINK_02$1,
	NOTE_EDIT_PAGE_INSERT_LINK_03: NOTE_EDIT_PAGE_INSERT_LINK_03$1,
	NOTE_EDIT_PAGE_INSERT_LINK_04: NOTE_EDIT_PAGE_INSERT_LINK_04$1,
	NOTE_EDIT_PAGE_INSERT_LINK_05: NOTE_EDIT_PAGE_INSERT_LINK_05$1,
	NOTE_EDIT_PAGE_INSERT_LINK_06: NOTE_EDIT_PAGE_INSERT_LINK_06$1,
	NOTE_EDIT_PAGE_INSERT_LINK_07: NOTE_EDIT_PAGE_INSERT_LINK_07$1,
	NOTE_EDIT_PAGE_INSERT_LINK_08: NOTE_EDIT_PAGE_INSERT_LINK_08$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_01: NOTE_EDIT_PAGE_ATTACH_FILE_01$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_02: NOTE_EDIT_PAGE_ATTACH_FILE_02$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_03: NOTE_EDIT_PAGE_ATTACH_FILE_03$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_04: NOTE_EDIT_PAGE_ATTACH_FILE_04$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_05: NOTE_EDIT_PAGE_ATTACH_FILE_05$1,
	NOTE_EDIT_PAGE_COMPLETE_01: NOTE_EDIT_PAGE_COMPLETE_01$1,
	NOTE_EDIT_PAGE_COMPLETE_02: NOTE_EDIT_PAGE_COMPLETE_02$1,
	NOTE_DELIVER_CONTEXT_MENU_01: NOTE_DELIVER_CONTEXT_MENU_01$1,
	NOTE_DELIVER_CONTEXT_MENU_02: NOTE_DELIVER_CONTEXT_MENU_02$1,
	NOTE_DELIVER_CONTEXT_MENU_03: NOTE_DELIVER_CONTEXT_MENU_03$1,
	NOTE_DELIVER_CONTEXT_MENU_04: NOTE_DELIVER_CONTEXT_MENU_04$1,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01$1,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02$1,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_01: NOTE_DELIVER_TO_ANOTHER_ROOM_01$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_02: NOTE_DELIVER_TO_ANOTHER_ROOM_02$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_03: NOTE_DELIVER_TO_ANOTHER_ROOM_03$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_04: NOTE_DELIVER_TO_ANOTHER_ROOM_04$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_05: NOTE_DELIVER_TO_ANOTHER_ROOM_05$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_06: NOTE_DELIVER_TO_ANOTHER_ROOM_06$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_07: NOTE_DELIVER_TO_ANOTHER_ROOM_07$1,
	NOTE_DELIVER_TO_ANOTHER_ROOM_08: NOTE_DELIVER_TO_ANOTHER_ROOM_08$1,
	NOTE_TAG_TAG_MENU_01: NOTE_TAG_TAG_MENU_01$1,
	NOTE_TAG_TAG_MENU_02: NOTE_TAG_TAG_MENU_02$1,
	NOTE_TAG_TAG_MENU_03: NOTE_TAG_TAG_MENU_03$1,
	NOTE_TAG_TAG_MENU_04: NOTE_TAG_TAG_MENU_04$1,
	NOTE_TAG_TAG_MENU_05: NOTE_TAG_TAG_MENU_05$1,
	NOTE_TAG_NO_CONTENTS_01: NOTE_TAG_NO_CONTENTS_01$1,
	NOTE_TAG_NO_CONTENTS_02: NOTE_TAG_NO_CONTENTS_02$1,
	NOTE_EDIT_PAGE_MENUBAR_01: NOTE_EDIT_PAGE_MENUBAR_01$1,
	NOTE_EDIT_PAGE_MENUBAR_02: NOTE_EDIT_PAGE_MENUBAR_02$1,
	NOTE_EDIT_PAGE_MENUBAR_03: NOTE_EDIT_PAGE_MENUBAR_03$1,
	NOTE_EDIT_PAGE_MENUBAR_04: NOTE_EDIT_PAGE_MENUBAR_04$1,
	NOTE_EDIT_PAGE_MENUBAR_05: NOTE_EDIT_PAGE_MENUBAR_05$1,
	NOTE_EDIT_PAGE_MENUBAR_06: NOTE_EDIT_PAGE_MENUBAR_06$1,
	NOTE_EDIT_PAGE_MENUBAR_07: NOTE_EDIT_PAGE_MENUBAR_07$1,
	NOTE_EDIT_PAGE_MENUBAR_08: NOTE_EDIT_PAGE_MENUBAR_08$1,
	NOTE_EDIT_PAGE_MENUBAR_09: NOTE_EDIT_PAGE_MENUBAR_09$1,
	NOTE_EDIT_PAGE_MENUBAR_10: NOTE_EDIT_PAGE_MENUBAR_10$1,
	NOTE_EDIT_PAGE_MENUBAR_11: NOTE_EDIT_PAGE_MENUBAR_11$1,
	NOTE_EDIT_PAGE_MENUBAR_12: NOTE_EDIT_PAGE_MENUBAR_12$1,
	NOTE_EDIT_PAGE_MENUBAR_13: NOTE_EDIT_PAGE_MENUBAR_13$1,
	NOTE_EDIT_PAGE_MENUBAR_14: NOTE_EDIT_PAGE_MENUBAR_14$1,
	NOTE_EDIT_PAGE_MENUBAR_15: NOTE_EDIT_PAGE_MENUBAR_15$1,
	NOTE_EDIT_PAGE_MENUBAR_16: NOTE_EDIT_PAGE_MENUBAR_16$1,
	NOTE_EDIT_PAGE_MENUBAR_17: NOTE_EDIT_PAGE_MENUBAR_17$1,
	NOTE_EDIT_PAGE_MENUBAR_18: NOTE_EDIT_PAGE_MENUBAR_18$1,
	NOTE_EDIT_PAGE_MENUBAR_19: NOTE_EDIT_PAGE_MENUBAR_19$1,
	NOTE_EDIT_PAGE_MENUBAR_20: NOTE_EDIT_PAGE_MENUBAR_20$1,
	NOTE_EDIT_PAGE_MENUBAR_21: NOTE_EDIT_PAGE_MENUBAR_21$1,
	NOTE_EDIT_PAGE_MENUBAR_22: NOTE_EDIT_PAGE_MENUBAR_22$1,
	NOTE_EDIT_PAGE_MENUBAR_23: NOTE_EDIT_PAGE_MENUBAR_23$1,
	NOTE_EDIT_PAGE_MENUBAR_24: NOTE_EDIT_PAGE_MENUBAR_24$1,
	NOTE_EDIT_PAGE_MENUBAR_25: NOTE_EDIT_PAGE_MENUBAR_25$1,
	NOTE_EDIT_PAGE_MENUBAR_26: NOTE_EDIT_PAGE_MENUBAR_26$1,
	NOTE_EDIT_PAGE_MENUBAR_27: NOTE_EDIT_PAGE_MENUBAR_27$1,
	NOTE_EDIT_PAGE_MENUBAR_28: NOTE_EDIT_PAGE_MENUBAR_28$1,
	NOTE_EDIT_PAGE_MENUBAR_29: NOTE_EDIT_PAGE_MENUBAR_29$1,
	NOTE_EDIT_PAGE_MENUBAR_30: NOTE_EDIT_PAGE_MENUBAR_30$1,
	NOTE_EDIT_PAGE_MENUBAR_31: NOTE_EDIT_PAGE_MENUBAR_31$1,
	NOTE_EDIT_PAGE_INSERT_LINK_09: NOTE_EDIT_PAGE_INSERT_LINK_09$1,
	NOTE_EDIT_PAGE_ADD_TAG_01: NOTE_EDIT_PAGE_ADD_TAG_01$1,
	NOTE_PAGE_LIST_NO_CHPT_01: NOTE_PAGE_LIST_NO_CHPT_01$1,
	NOTE_PAGE_LIST_NO_CHPT_02: NOTE_PAGE_LIST_NO_CHPT_02$1,
	NOTE_EDIT_PAGE_MENUBAR_32: NOTE_EDIT_PAGE_MENUBAR_32$1,
	NOTE_EDIT_PAGE_MENUBAR_33: NOTE_EDIT_PAGE_MENUBAR_33$1,
	NOTE_EDIT_PAGE_MENUBAR_34: NOTE_EDIT_PAGE_MENUBAR_34$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_08: NOTE_PAGE_LIST_DEL_PGE_CHPT_08$1,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01$1,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_06: NOTE_EDIT_PAGE_ATTACH_FILE_06$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_07: NOTE_EDIT_PAGE_ATTACH_FILE_07$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_08: NOTE_EDIT_PAGE_ATTACH_FILE_08$1,
	NOTE_EDIT_PAGE_ATTACH_FILE_09: NOTE_EDIT_PAGE_ATTACH_FILE_09$1,
	NOTE_EDIT_PAGE_INSERT_LINK_10: NOTE_EDIT_PAGE_INSERT_LINK_10$1,
	NOTE_EDIT_PAGE_INSERT_LINK_11: NOTE_EDIT_PAGE_INSERT_LINK_11$1,
	NOTE_EDIT_PAGE_INSERT_LINK_12: NOTE_EDIT_PAGE_INSERT_LINK_12$1,
	NOTE_EDIT_PAGE_INSERT_LINK_13: NOTE_EDIT_PAGE_INSERT_LINK_13$1,
	NOTE_EDIT_PAGE_AUTO_SAVE_01: NOTE_EDIT_PAGE_AUTO_SAVE_01$1,
	NOTE_EDIT_PAGE_AUTO_SAVE_02: NOTE_EDIT_PAGE_AUTO_SAVE_02$1,
	NOTE_EDIT_PAGE_CANT_EDIT_01: NOTE_EDIT_PAGE_CANT_EDIT_01$1,
	NOTE_ADD_TAGS_01: NOTE_ADD_TAGS_01$1,
	NOTE_ADD_TAGS_02: NOTE_ADD_TAGS_02$1,
	NOTE_EDIT_PAGE_MENUBAR_35: NOTE_EDIT_PAGE_MENUBAR_35$1,
	NOTE_GUEST_01: NOTE_GUEST_01$1,
	NOTE_GUEST_02: NOTE_GUEST_02$1,
	DRIVE_UPLOAD_BTN_04: DRIVE_UPLOAD_BTN_04$1,
	NOTE_EDIT_PAGE_UPDATE_TIME_01: NOTE_EDIT_PAGE_UPDATE_TIME_01$1,
	NOTE_EDIT_PAGE_UPDATE_TIME_02: NOTE_EDIT_PAGE_UPDATE_TIME_02$1,
	NOTE_EXPORT_TITLE: NOTE_EXPORT_TITLE$1,
	NOTE_CONTEXT_MENU_01: NOTE_CONTEXT_MENU_01$1,
	NOTE_CONTEXT_MENU_02: NOTE_CONTEXT_MENU_02$1,
	NOTE_CONTEXT_MENU_03: NOTE_CONTEXT_MENU_03$1,
	NOTE_DND_ACTION_01: NOTE_DND_ACTION_01$1,
	NOTE_DND_ACTION_02: NOTE_DND_ACTION_02$1,
	NOTE_BIN_01: NOTE_BIN_01$1,
	NOTE_BIN_02: NOTE_BIN_02$1,
	NOTE_BIN_03: NOTE_BIN_03$1,
	NOTE_BIN_04: NOTE_BIN_04$1,
	NOTE_BIN_05: NOTE_BIN_05$1,
	NOTE_BIN_06: NOTE_BIN_06$1,
	NOTE_BIN_07: NOTE_BIN_07$1,
	NOTE_BIN_08: NOTE_BIN_08$1,
	NOTE_BIN_RESTORE_01: NOTE_BIN_RESTORE_01$1,
	NOTE_BIN_RESTORE_02: NOTE_BIN_RESTORE_02$1,
	NOTE_BIN_RESTORE_03: NOTE_BIN_RESTORE_03$1,
	NOTE_EDIT_PAGE_MENUBAR_36: NOTE_EDIT_PAGE_MENUBAR_36$1,
	NOTE_RECOVER_DATA_01: NOTE_RECOVER_DATA_01$1,
	NOTE_META_TAG_01: NOTE_META_TAG_01$1,
	NOTE_META_TAG_02: NOTE_META_TAG_02$1,
	NOTE_META_TAG_03: NOTE_META_TAG_03$1,
	NOTE_META_TAG_04: NOTE_META_TAG_04$1,
	NOTE_SAVE_PAGE: NOTE_SAVE_PAGE$1,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_09: NOTE_PAGE_LIST_DEL_PGE_CHPT_09$1,
	NOTE_NOTICENTER_01: NOTE_NOTICENTER_01$1,
	NOTE_NOTICENTER_02: NOTE_NOTICENTER_02$1,
	NOTE_NOTICENTER_03: NOTE_NOTICENTER_03$1
};

var NOTE_PAGE_LIST_CMPNT_DEF_01 = "New Chapter";
var NOTE_PAGE_LIST_CMPNT_DEF_02 = "New Page";
var NOTE_PAGE_LIST_CMPNT_DEF_03 = "(Untitled)";
var NOTE_PAGE_LIST_CMPNT_DEF_04 = "Add New Page";
var NOTE_PAGE_LIST_CMPNT_DEF_05 = "Search page or chapter";
var NOTE_PAGE_LIST_CMPNT_DEF_06 = "Tag";
var NOTE_PAGE_LIST_CMPNT_DEF_07 = "Page Received";
var NOTE_PAGE_LIST_CREATE_N_CHPT_01 = "Duplicate name exists.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_02 = "Enter another name.";
var NOTE_PAGE_LIST_CREATE_N_CHPT_03 = "OK";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_01 = "Unable to delete.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_02 = "It is currently being modified by {{userName}}";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_03 = "Do you want to delete this page?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_04 = "Delete";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_05 = "Cancel";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_06 = "Do you want to delete this chapter?";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_07 = "The pages belonging to the chapter are moved to Trash.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_01 = "Modify";
var NOTE_PAGE_LIST_ADD_NEW_PGE_02 = "Read Mode";
var NOTE_PAGE_LIST_ADD_NEW_PGE_03 = "Click Modify to edit this page.";
var NOTE_PAGE_LIST_ADD_NEW_PGE_04 = "Save";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_01 = "{{moveCnt}} pages moved to {{targetPage}}.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_02 = "{{moveCnt}} chapters moved.";
var NOTE_PAGE_LIST_MOVE_PGE_CHPT_03 = "{{moveCnt}} pages moved.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01 = "No page exists.";
var NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02 = "To create one, click 'Add New Page'.";
var NOTE_EDIT_PAGE_WORK_AREA_DEF_01 = "(Unregistered Member)";
var NOTE_EDIT_PAGE_SEARCH_01 = "No search results found.";
var NOTE_EDIT_PAGE_SEARCH_02 = "Searching...";
var NOTE_EDIT_PAGE_SEARCH_03 = "Search keyword";
var NOTE_EDIT_PAGE_INSERT_LINK_01 = "Insert Link";
var NOTE_EDIT_PAGE_INSERT_LINK_02 = "Done";
var NOTE_EDIT_PAGE_INSERT_LINK_03 = "Enter a text.";
var NOTE_EDIT_PAGE_INSERT_LINK_04 = "Text";
var NOTE_EDIT_PAGE_INSERT_LINK_05 = "Link";
var NOTE_EDIT_PAGE_INSERT_LINK_06 = "The URL is not valid.";
var NOTE_EDIT_PAGE_INSERT_LINK_07 = "Edit Link";
var NOTE_EDIT_PAGE_INSERT_LINK_08 = "Delete Link";
var NOTE_EDIT_PAGE_ATTACH_FILE_01 = "Attach from Drive";
var NOTE_EDIT_PAGE_ATTACH_FILE_02 = "Attach from My PC";
var NOTE_EDIT_PAGE_ATTACH_FILE_03 = "There is not enough storage space to attach the file.";
var NOTE_EDIT_PAGE_ATTACH_FILE_04 = "You can attach up to 20 GB files at a time.";
var NOTE_EDIT_PAGE_ATTACH_FILE_05 = "You can attach up to 30 files at a time.";
var NOTE_EDIT_PAGE_COMPLETE_01 = "Do you want to save this page and exit?";
var NOTE_EDIT_PAGE_COMPLETE_02 = "Not Save";
var NOTE_DELIVER_CONTEXT_MENU_01 = "Rename";
var NOTE_DELIVER_CONTEXT_MENU_02 = "Send Email";
var NOTE_DELIVER_CONTEXT_MENU_03 = "Export";
var NOTE_DELIVER_CONTEXT_MENU_04 = "View Information";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01 = "Room";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02 = "Member";
var NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03 = "Date";
var NOTE_DELIVER_TO_ANOTHER_ROOM_01 = "Search nickname";
var NOTE_DELIVER_TO_ANOTHER_ROOM_02 = "Rooms";
var NOTE_DELIVER_TO_ANOTHER_ROOM_03 = "Friends";
var NOTE_DELIVER_TO_ANOTHER_ROOM_04 = "Me";
var NOTE_DELIVER_TO_ANOTHER_ROOM_05 = "Select people from the Friends/Rooms list.";
var NOTE_DELIVER_TO_ANOTHER_ROOM_06 = "Search room name or member";
var NOTE_DELIVER_TO_ANOTHER_ROOM_07 = "Send";
var NOTE_DELIVER_TO_ANOTHER_ROOM_08 = "Favorites";
var NOTE_TAG_TAG_MENU_01 = "ㄱ-ㅎ";
var NOTE_TAG_TAG_MENU_02 = "A-Z";
var NOTE_TAG_TAG_MENU_03 = "0-9";
var NOTE_TAG_TAG_MENU_04 = "Others";
var NOTE_TAG_TAG_MENU_05 = "Search tag";
var NOTE_TAG_NO_CONTENTS_01 = "No tag found.";
var NOTE_TAG_NO_CONTENTS_02 = "Enter a tag at the bottom of the page or choose one from the list.";
var NOTE_EDIT_PAGE_MENUBAR_01 = "Undo";
var NOTE_EDIT_PAGE_MENUBAR_02 = "Redo";
var NOTE_EDIT_PAGE_MENUBAR_03 = "Body Style";
var NOTE_EDIT_PAGE_MENUBAR_04 = "Font Type";
var NOTE_EDIT_PAGE_MENUBAR_05 = "Font Size";
var NOTE_EDIT_PAGE_MENUBAR_06 = "Character Color";
var NOTE_EDIT_PAGE_MENUBAR_07 = "Background Color";
var NOTE_EDIT_PAGE_MENUBAR_08 = "Bold";
var NOTE_EDIT_PAGE_MENUBAR_09 = "Italics";
var NOTE_EDIT_PAGE_MENUBAR_10 = "Underline";
var NOTE_EDIT_PAGE_MENUBAR_11 = "Left";
var NOTE_EDIT_PAGE_MENUBAR_12 = "Middle";
var NOTE_EDIT_PAGE_MENUBAR_13 = "Right";
var NOTE_EDIT_PAGE_MENUBAR_14 = "Both";
var NOTE_EDIT_PAGE_MENUBAR_15 = "Numbering";
var NOTE_EDIT_PAGE_MENUBAR_16 = "Bullet Point";
var NOTE_EDIT_PAGE_MENUBAR_17 = "Checklist";
var NOTE_EDIT_PAGE_MENUBAR_18 = "Indent";
var NOTE_EDIT_PAGE_MENUBAR_19 = "Outdent";
var NOTE_EDIT_PAGE_MENUBAR_20 = "Delimiter";
var NOTE_EDIT_PAGE_MENUBAR_21 = "Tables";
var NOTE_EDIT_PAGE_MENUBAR_22 = "Enter Current time";
var NOTE_EDIT_PAGE_MENUBAR_23 = "Insert Images/Videos";
var NOTE_EDIT_PAGE_MENUBAR_24 = "Attach Files";
var NOTE_EDIT_PAGE_MENUBAR_25 = "Rotate by 90 Degrees Counterclockwise";
var NOTE_EDIT_PAGE_MENUBAR_26 = "Rotate by 90 Degrees Clockwise";
var NOTE_EDIT_PAGE_MENUBAR_27 = "Flip Vertically";
var NOTE_EDIT_PAGE_MENUBAR_28 = "Flip Horizontally";
var NOTE_EDIT_PAGE_MENUBAR_29 = "Edit Image";
var NOTE_EDIT_PAGE_MENUBAR_30 = "Replace Image";
var NOTE_EDIT_PAGE_MENUBAR_31 = "Strikethrough";
var NOTE_EDIT_PAGE_INSERT_LINK_09 = "Move to Link";
var NOTE_EDIT_PAGE_ADD_TAG_01 = "The tag name already exists.";
var NOTE_PAGE_LIST_NO_CHPT_01 = "No chapter exists.";
var NOTE_PAGE_LIST_NO_CHPT_02 = "To create one, click 'New Chapter'.";
var NOTE_EDIT_PAGE_MENUBAR_32 = "Save to Drive";
var NOTE_EDIT_PAGE_MENUBAR_33 = "Save to My PC";
var NOTE_EDIT_PAGE_MENUBAR_34 = "Download";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_08 = "It is currently being modified by {{count}}.";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01 = "PDF Format(.pdf)";
var NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02 = "TXT Format(.txt)";
var NOTE_EDIT_PAGE_ATTACH_FILE_06 = "Unable to upload some files.";
var NOTE_EDIT_PAGE_ATTACH_FILE_07 = "({{failCnt}} out of {{uploadCnt}} failed)";
var NOTE_EDIT_PAGE_ATTACH_FILE_08 = "There is a file currently being uploaded.\\nDo you want to save and exit?";
var NOTE_EDIT_PAGE_ATTACH_FILE_09 = "The uploaded file is saved on the page.";
var NOTE_EDIT_PAGE_INSERT_LINK_10 = "Invalid address.";
var NOTE_EDIT_PAGE_INSERT_LINK_11 = "Enter a text.";
var NOTE_EDIT_PAGE_INSERT_LINK_12 = "Enter a link.";
var NOTE_EDIT_PAGE_INSERT_LINK_13 = "Add 'mailto:' in an email.";
var NOTE_EDIT_PAGE_AUTO_SAVE_01 = "Saving…";
var NOTE_EDIT_PAGE_AUTO_SAVE_02 = "Page saved.";
var NOTE_EDIT_PAGE_CANT_EDIT_01 = "Unable to Modify.";
var NOTE_ADD_TAGS_01 = "Add Tag";
var NOTE_ADD_TAGS_02 = "You cannot add tags in read mode.";
var NOTE_EDIT_PAGE_MENUBAR_35 = "Align";
var NOTE_GUEST_01 = "Guests cannot edit chapters and pages.";
var NOTE_GUEST_02 = "This feature is not available to guests.";
var DRIVE_UPLOAD_BTN_04 = "The name of the file cannot exceed the limit of 70 characters. ";
var NOTE_EDIT_PAGE_UPDATE_TIME_01 = "{{time}} AM";
var NOTE_EDIT_PAGE_UPDATE_TIME_02 = "{{time}} PM";
var NOTE_EXPORT_TITLE = "Title";
var NOTE_CONTEXT_MENU_01 = "Forwarded to another room.";
var NOTE_CONTEXT_MENU_02 = "Recover";
var NOTE_CONTEXT_MENU_03 = "Empty Trash";
var NOTE_DND_ACTION_01 = "Cannot move.";
var NOTE_DND_ACTION_02 = "Received chapters and pages cannot be moved.";
var NOTE_BIN_01 = "Trash";
var NOTE_BIN_02 = "Moved to Trash.";
var NOTE_BIN_03 = "{{num}} pages have been moved to Trash.";
var NOTE_BIN_04 = "Chapter deleted.";
var NOTE_BIN_05 = "After 30 days, pages are deleted from the Trash.";
var NOTE_BIN_06 = "Do you want to permanently delete this page?";
var NOTE_BIN_07 = "This action cannot be undone.";
var NOTE_BIN_08 = "Do you want to permanently delete {{num}} pages?";
var NOTE_BIN_RESTORE_01 = "Which chapter do you want to restore to?";
var NOTE_BIN_RESTORE_02 = "Page has been restored.";
var NOTE_BIN_RESTORE_03 = "{{num}} pages have been restored.";
var NOTE_EDIT_PAGE_MENUBAR_36 = "Source Code";
var NOTE_RECOVER_DATA_01 = "There is a page being created.\\nDo you want to recover?";
var NOTE_META_TAG_01 = "Chapter";
var NOTE_META_TAG_02 = "Page";
var NOTE_META_TAG_03 = "Unable to load the page because it has been deleted.";
var NOTE_META_TAG_04 = "Unable to load the chapter because it has been deleted.";
var NOTE_SAVE_PAGE = "Page saved.";
var NOTE_PAGE_LIST_DEL_PGE_CHPT_09 = "Pages forwarded will be permanently deleted.";
var NOTE_NOTICENTER_01 = "The chapter has been shared.";
var NOTE_NOTICENTER_02 = "The page has been shared.";
var NOTE_NOTICENTER_03 = "{{title}} has been created.";
var en = {
	NOTE_PAGE_LIST_CMPNT_DEF_01: NOTE_PAGE_LIST_CMPNT_DEF_01,
	NOTE_PAGE_LIST_CMPNT_DEF_02: NOTE_PAGE_LIST_CMPNT_DEF_02,
	NOTE_PAGE_LIST_CMPNT_DEF_03: NOTE_PAGE_LIST_CMPNT_DEF_03,
	NOTE_PAGE_LIST_CMPNT_DEF_04: NOTE_PAGE_LIST_CMPNT_DEF_04,
	NOTE_PAGE_LIST_CMPNT_DEF_05: NOTE_PAGE_LIST_CMPNT_DEF_05,
	NOTE_PAGE_LIST_CMPNT_DEF_06: NOTE_PAGE_LIST_CMPNT_DEF_06,
	NOTE_PAGE_LIST_CMPNT_DEF_07: NOTE_PAGE_LIST_CMPNT_DEF_07,
	NOTE_PAGE_LIST_CREATE_N_CHPT_01: NOTE_PAGE_LIST_CREATE_N_CHPT_01,
	NOTE_PAGE_LIST_CREATE_N_CHPT_02: NOTE_PAGE_LIST_CREATE_N_CHPT_02,
	NOTE_PAGE_LIST_CREATE_N_CHPT_03: NOTE_PAGE_LIST_CREATE_N_CHPT_03,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_01: NOTE_PAGE_LIST_DEL_PGE_CHPT_01,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_02: NOTE_PAGE_LIST_DEL_PGE_CHPT_02,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_03: NOTE_PAGE_LIST_DEL_PGE_CHPT_03,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_04: NOTE_PAGE_LIST_DEL_PGE_CHPT_04,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_05: NOTE_PAGE_LIST_DEL_PGE_CHPT_05,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_06: NOTE_PAGE_LIST_DEL_PGE_CHPT_06,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_07: NOTE_PAGE_LIST_DEL_PGE_CHPT_07,
	NOTE_PAGE_LIST_ADD_NEW_PGE_01: NOTE_PAGE_LIST_ADD_NEW_PGE_01,
	NOTE_PAGE_LIST_ADD_NEW_PGE_02: NOTE_PAGE_LIST_ADD_NEW_PGE_02,
	NOTE_PAGE_LIST_ADD_NEW_PGE_03: NOTE_PAGE_LIST_ADD_NEW_PGE_03,
	NOTE_PAGE_LIST_ADD_NEW_PGE_04: NOTE_PAGE_LIST_ADD_NEW_PGE_04,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_01: NOTE_PAGE_LIST_MOVE_PGE_CHPT_01,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_02: NOTE_PAGE_LIST_MOVE_PGE_CHPT_02,
	NOTE_PAGE_LIST_MOVE_PGE_CHPT_03: NOTE_PAGE_LIST_MOVE_PGE_CHPT_03,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_01,
	NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02: NOTE_PAGE_LIST_NO_PGE_IN_CHPT_02,
	NOTE_EDIT_PAGE_WORK_AREA_DEF_01: NOTE_EDIT_PAGE_WORK_AREA_DEF_01,
	NOTE_EDIT_PAGE_SEARCH_01: NOTE_EDIT_PAGE_SEARCH_01,
	NOTE_EDIT_PAGE_SEARCH_02: NOTE_EDIT_PAGE_SEARCH_02,
	NOTE_EDIT_PAGE_SEARCH_03: NOTE_EDIT_PAGE_SEARCH_03,
	NOTE_EDIT_PAGE_INSERT_LINK_01: NOTE_EDIT_PAGE_INSERT_LINK_01,
	NOTE_EDIT_PAGE_INSERT_LINK_02: NOTE_EDIT_PAGE_INSERT_LINK_02,
	NOTE_EDIT_PAGE_INSERT_LINK_03: NOTE_EDIT_PAGE_INSERT_LINK_03,
	NOTE_EDIT_PAGE_INSERT_LINK_04: NOTE_EDIT_PAGE_INSERT_LINK_04,
	NOTE_EDIT_PAGE_INSERT_LINK_05: NOTE_EDIT_PAGE_INSERT_LINK_05,
	NOTE_EDIT_PAGE_INSERT_LINK_06: NOTE_EDIT_PAGE_INSERT_LINK_06,
	NOTE_EDIT_PAGE_INSERT_LINK_07: NOTE_EDIT_PAGE_INSERT_LINK_07,
	NOTE_EDIT_PAGE_INSERT_LINK_08: NOTE_EDIT_PAGE_INSERT_LINK_08,
	NOTE_EDIT_PAGE_ATTACH_FILE_01: NOTE_EDIT_PAGE_ATTACH_FILE_01,
	NOTE_EDIT_PAGE_ATTACH_FILE_02: NOTE_EDIT_PAGE_ATTACH_FILE_02,
	NOTE_EDIT_PAGE_ATTACH_FILE_03: NOTE_EDIT_PAGE_ATTACH_FILE_03,
	NOTE_EDIT_PAGE_ATTACH_FILE_04: NOTE_EDIT_PAGE_ATTACH_FILE_04,
	NOTE_EDIT_PAGE_ATTACH_FILE_05: NOTE_EDIT_PAGE_ATTACH_FILE_05,
	NOTE_EDIT_PAGE_COMPLETE_01: NOTE_EDIT_PAGE_COMPLETE_01,
	NOTE_EDIT_PAGE_COMPLETE_02: NOTE_EDIT_PAGE_COMPLETE_02,
	NOTE_DELIVER_CONTEXT_MENU_01: NOTE_DELIVER_CONTEXT_MENU_01,
	NOTE_DELIVER_CONTEXT_MENU_02: NOTE_DELIVER_CONTEXT_MENU_02,
	NOTE_DELIVER_CONTEXT_MENU_03: NOTE_DELIVER_CONTEXT_MENU_03,
	NOTE_DELIVER_CONTEXT_MENU_04: NOTE_DELIVER_CONTEXT_MENU_04,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_01,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_02,
	NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03: NOTE_DELIVER_CONTEXT_MENU_NOTE_INFO_03,
	NOTE_DELIVER_TO_ANOTHER_ROOM_01: NOTE_DELIVER_TO_ANOTHER_ROOM_01,
	NOTE_DELIVER_TO_ANOTHER_ROOM_02: NOTE_DELIVER_TO_ANOTHER_ROOM_02,
	NOTE_DELIVER_TO_ANOTHER_ROOM_03: NOTE_DELIVER_TO_ANOTHER_ROOM_03,
	NOTE_DELIVER_TO_ANOTHER_ROOM_04: NOTE_DELIVER_TO_ANOTHER_ROOM_04,
	NOTE_DELIVER_TO_ANOTHER_ROOM_05: NOTE_DELIVER_TO_ANOTHER_ROOM_05,
	NOTE_DELIVER_TO_ANOTHER_ROOM_06: NOTE_DELIVER_TO_ANOTHER_ROOM_06,
	NOTE_DELIVER_TO_ANOTHER_ROOM_07: NOTE_DELIVER_TO_ANOTHER_ROOM_07,
	NOTE_DELIVER_TO_ANOTHER_ROOM_08: NOTE_DELIVER_TO_ANOTHER_ROOM_08,
	NOTE_TAG_TAG_MENU_01: NOTE_TAG_TAG_MENU_01,
	NOTE_TAG_TAG_MENU_02: NOTE_TAG_TAG_MENU_02,
	NOTE_TAG_TAG_MENU_03: NOTE_TAG_TAG_MENU_03,
	NOTE_TAG_TAG_MENU_04: NOTE_TAG_TAG_MENU_04,
	NOTE_TAG_TAG_MENU_05: NOTE_TAG_TAG_MENU_05,
	NOTE_TAG_NO_CONTENTS_01: NOTE_TAG_NO_CONTENTS_01,
	NOTE_TAG_NO_CONTENTS_02: NOTE_TAG_NO_CONTENTS_02,
	NOTE_EDIT_PAGE_MENUBAR_01: NOTE_EDIT_PAGE_MENUBAR_01,
	NOTE_EDIT_PAGE_MENUBAR_02: NOTE_EDIT_PAGE_MENUBAR_02,
	NOTE_EDIT_PAGE_MENUBAR_03: NOTE_EDIT_PAGE_MENUBAR_03,
	NOTE_EDIT_PAGE_MENUBAR_04: NOTE_EDIT_PAGE_MENUBAR_04,
	NOTE_EDIT_PAGE_MENUBAR_05: NOTE_EDIT_PAGE_MENUBAR_05,
	NOTE_EDIT_PAGE_MENUBAR_06: NOTE_EDIT_PAGE_MENUBAR_06,
	NOTE_EDIT_PAGE_MENUBAR_07: NOTE_EDIT_PAGE_MENUBAR_07,
	NOTE_EDIT_PAGE_MENUBAR_08: NOTE_EDIT_PAGE_MENUBAR_08,
	NOTE_EDIT_PAGE_MENUBAR_09: NOTE_EDIT_PAGE_MENUBAR_09,
	NOTE_EDIT_PAGE_MENUBAR_10: NOTE_EDIT_PAGE_MENUBAR_10,
	NOTE_EDIT_PAGE_MENUBAR_11: NOTE_EDIT_PAGE_MENUBAR_11,
	NOTE_EDIT_PAGE_MENUBAR_12: NOTE_EDIT_PAGE_MENUBAR_12,
	NOTE_EDIT_PAGE_MENUBAR_13: NOTE_EDIT_PAGE_MENUBAR_13,
	NOTE_EDIT_PAGE_MENUBAR_14: NOTE_EDIT_PAGE_MENUBAR_14,
	NOTE_EDIT_PAGE_MENUBAR_15: NOTE_EDIT_PAGE_MENUBAR_15,
	NOTE_EDIT_PAGE_MENUBAR_16: NOTE_EDIT_PAGE_MENUBAR_16,
	NOTE_EDIT_PAGE_MENUBAR_17: NOTE_EDIT_PAGE_MENUBAR_17,
	NOTE_EDIT_PAGE_MENUBAR_18: NOTE_EDIT_PAGE_MENUBAR_18,
	NOTE_EDIT_PAGE_MENUBAR_19: NOTE_EDIT_PAGE_MENUBAR_19,
	NOTE_EDIT_PAGE_MENUBAR_20: NOTE_EDIT_PAGE_MENUBAR_20,
	NOTE_EDIT_PAGE_MENUBAR_21: NOTE_EDIT_PAGE_MENUBAR_21,
	NOTE_EDIT_PAGE_MENUBAR_22: NOTE_EDIT_PAGE_MENUBAR_22,
	NOTE_EDIT_PAGE_MENUBAR_23: NOTE_EDIT_PAGE_MENUBAR_23,
	NOTE_EDIT_PAGE_MENUBAR_24: NOTE_EDIT_PAGE_MENUBAR_24,
	NOTE_EDIT_PAGE_MENUBAR_25: NOTE_EDIT_PAGE_MENUBAR_25,
	NOTE_EDIT_PAGE_MENUBAR_26: NOTE_EDIT_PAGE_MENUBAR_26,
	NOTE_EDIT_PAGE_MENUBAR_27: NOTE_EDIT_PAGE_MENUBAR_27,
	NOTE_EDIT_PAGE_MENUBAR_28: NOTE_EDIT_PAGE_MENUBAR_28,
	NOTE_EDIT_PAGE_MENUBAR_29: NOTE_EDIT_PAGE_MENUBAR_29,
	NOTE_EDIT_PAGE_MENUBAR_30: NOTE_EDIT_PAGE_MENUBAR_30,
	NOTE_EDIT_PAGE_MENUBAR_31: NOTE_EDIT_PAGE_MENUBAR_31,
	NOTE_EDIT_PAGE_INSERT_LINK_09: NOTE_EDIT_PAGE_INSERT_LINK_09,
	NOTE_EDIT_PAGE_ADD_TAG_01: NOTE_EDIT_PAGE_ADD_TAG_01,
	NOTE_PAGE_LIST_NO_CHPT_01: NOTE_PAGE_LIST_NO_CHPT_01,
	NOTE_PAGE_LIST_NO_CHPT_02: NOTE_PAGE_LIST_NO_CHPT_02,
	NOTE_EDIT_PAGE_MENUBAR_32: NOTE_EDIT_PAGE_MENUBAR_32,
	NOTE_EDIT_PAGE_MENUBAR_33: NOTE_EDIT_PAGE_MENUBAR_33,
	NOTE_EDIT_PAGE_MENUBAR_34: NOTE_EDIT_PAGE_MENUBAR_34,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_08: NOTE_PAGE_LIST_DEL_PGE_CHPT_08,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_01,
	NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02: NOTE_PAGE_LIST_DL_PAGE_CHAPTER_02,
	NOTE_EDIT_PAGE_ATTACH_FILE_06: NOTE_EDIT_PAGE_ATTACH_FILE_06,
	NOTE_EDIT_PAGE_ATTACH_FILE_07: NOTE_EDIT_PAGE_ATTACH_FILE_07,
	NOTE_EDIT_PAGE_ATTACH_FILE_08: NOTE_EDIT_PAGE_ATTACH_FILE_08,
	NOTE_EDIT_PAGE_ATTACH_FILE_09: NOTE_EDIT_PAGE_ATTACH_FILE_09,
	NOTE_EDIT_PAGE_INSERT_LINK_10: NOTE_EDIT_PAGE_INSERT_LINK_10,
	NOTE_EDIT_PAGE_INSERT_LINK_11: NOTE_EDIT_PAGE_INSERT_LINK_11,
	NOTE_EDIT_PAGE_INSERT_LINK_12: NOTE_EDIT_PAGE_INSERT_LINK_12,
	NOTE_EDIT_PAGE_INSERT_LINK_13: NOTE_EDIT_PAGE_INSERT_LINK_13,
	NOTE_EDIT_PAGE_AUTO_SAVE_01: NOTE_EDIT_PAGE_AUTO_SAVE_01,
	NOTE_EDIT_PAGE_AUTO_SAVE_02: NOTE_EDIT_PAGE_AUTO_SAVE_02,
	NOTE_EDIT_PAGE_CANT_EDIT_01: NOTE_EDIT_PAGE_CANT_EDIT_01,
	NOTE_ADD_TAGS_01: NOTE_ADD_TAGS_01,
	NOTE_ADD_TAGS_02: NOTE_ADD_TAGS_02,
	NOTE_EDIT_PAGE_MENUBAR_35: NOTE_EDIT_PAGE_MENUBAR_35,
	NOTE_GUEST_01: NOTE_GUEST_01,
	NOTE_GUEST_02: NOTE_GUEST_02,
	DRIVE_UPLOAD_BTN_04: DRIVE_UPLOAD_BTN_04,
	NOTE_EDIT_PAGE_UPDATE_TIME_01: NOTE_EDIT_PAGE_UPDATE_TIME_01,
	NOTE_EDIT_PAGE_UPDATE_TIME_02: NOTE_EDIT_PAGE_UPDATE_TIME_02,
	NOTE_EXPORT_TITLE: NOTE_EXPORT_TITLE,
	NOTE_CONTEXT_MENU_01: NOTE_CONTEXT_MENU_01,
	NOTE_CONTEXT_MENU_02: NOTE_CONTEXT_MENU_02,
	NOTE_CONTEXT_MENU_03: NOTE_CONTEXT_MENU_03,
	NOTE_DND_ACTION_01: NOTE_DND_ACTION_01,
	NOTE_DND_ACTION_02: NOTE_DND_ACTION_02,
	NOTE_BIN_01: NOTE_BIN_01,
	NOTE_BIN_02: NOTE_BIN_02,
	NOTE_BIN_03: NOTE_BIN_03,
	NOTE_BIN_04: NOTE_BIN_04,
	NOTE_BIN_05: NOTE_BIN_05,
	NOTE_BIN_06: NOTE_BIN_06,
	NOTE_BIN_07: NOTE_BIN_07,
	NOTE_BIN_08: NOTE_BIN_08,
	NOTE_BIN_RESTORE_01: NOTE_BIN_RESTORE_01,
	NOTE_BIN_RESTORE_02: NOTE_BIN_RESTORE_02,
	NOTE_BIN_RESTORE_03: NOTE_BIN_RESTORE_03,
	NOTE_EDIT_PAGE_MENUBAR_36: NOTE_EDIT_PAGE_MENUBAR_36,
	NOTE_RECOVER_DATA_01: NOTE_RECOVER_DATA_01,
	NOTE_META_TAG_01: NOTE_META_TAG_01,
	NOTE_META_TAG_02: NOTE_META_TAG_02,
	NOTE_META_TAG_03: NOTE_META_TAG_03,
	NOTE_META_TAG_04: NOTE_META_TAG_04,
	NOTE_SAVE_PAGE: NOTE_SAVE_PAGE,
	NOTE_PAGE_LIST_DEL_PGE_CHPT_09: NOTE_PAGE_LIST_DEL_PGE_CHPT_09,
	NOTE_NOTICENTER_01: NOTE_NOTICENTER_01,
	NOTE_NOTICENTER_02: NOTE_NOTICENTER_02,
	NOTE_NOTICENTER_03: NOTE_NOTICENTER_03
};

var resources = {
    ko: {
        translation: ko,
    },
    en: {
        translation: en,
    },
};
var i18n = i18next.createInstance();
i18n.use(initReactI18next).init({
    debug: false,
    resources: resources,
    lng: 'ko',
    fallbackLng: 'ko',
    ns: ['translation'],
    defaultNS: 'translation',
    keySeparator: false,
    interpolation: { escapeValue: false },
    react: {
        useSuspense: false,
    },
}, function (err) {
    if (err) {
        console.log(err);
    }
});

var useNoteI18nInit = function () {
    useI18nInit(i18n);
};

var useNoteCore = function () {
    useNoteI18nInit();
};

var ChapterModel = /** @class */ (function () {
    function ChapterModel(chapterInfo) {
        this.type = chapterInfo.type;
        // Origin
        this.dto = chapterInfo;
    }
    Object.defineProperty(ChapterModel.prototype, "id", {
        get: function () {
            return this.dto.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "color", {
        get: function () {
            return this.dto.color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "pageList", {
        get: function () {
            return this.dto.children;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "sharedDate", {
        get: function () {
            return this.dto.shared_date;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "sharedRoomName", {
        get: function () {
            return this.dto.shared_room_name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "sharedUserId", {
        get: function () {
            return this.dto.shared_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "userId", {
        get: function () {
            return this.dto.USER_ID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "messengerId", {
        get: function () {
            return this.dto.messenger_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "channelId", {
        get: function () {
            return this.dto.note_channel_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterModel.prototype, "title", {
        get: function () {
            return this.dto.text;
        },
        enumerable: false,
        configurable: true
    });
    return ChapterModel;
}());

var PageModel = /** @class */ (function () {
    function PageModel(pageInfo) {
        this.dto = pageInfo;
    }
    Object.defineProperty(PageModel.prototype, "id", {
        get: function () {
            return this.dto.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "color", {
        get: function () {
            return this.dto.color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "workspaceId", {
        get: function () {
            return this.dto.WS_ID;
        },
        enumerable: false,
        configurable: true
    });
    return PageModel;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var ChapterRepo = /** @class */ (function () {
    function ChapterRepo() {
        this.prefix = 'note-api';
    }
    ChapterRepo.prototype.getChapterList = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.get("".concat(this.prefix, "/noteChapter?action=List&note_channel_id=").concat(channelId))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.getChapterChildren = function (chapterId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.Get("".concat(this.prefix, "/note?action=List&note_channel_id=").concat(channelId, "&parent_notebook=").concat(chapterId))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(JSON.stringify(e_2));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.getChapterInfo = function (chapterId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.Get("".concat(this.prefix, "/chaptershare?action=List&id=").concat(chapterId))];
            });
        });
    };
    ChapterRepo.prototype.createShareChapter = function (chapterList) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.post("".concat(this.prefix, "/chaptershare"), {
                        dto: {
                            notbookList: chapterList,
                        },
                    })];
            });
        });
    };
    ChapterRepo.prototype.createChapter = function (dto, i18nLanguage) {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/langauge/").concat(i18nLanguage, "/notebooks"), {
                                dto: dto,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 2:
                        e_3 = _a.sent();
                        throw Error(JSON.stringify(e_3));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.createEmptyChapter = function (dto) {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/children/none}/notebooks"), {
                                dto: dto,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 2:
                        e_4 = _a.sent();
                        throw Error(JSON.stringify(e_4));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.deleteChapter = function (chapterList) {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/notebook?action=Delete"), {
                                dto: {
                                    notbookList: chapterList,
                                },
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 2:
                        e_5 = _a.sent();
                        throw Error(JSON.stringify(e_5));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChapterRepo.prototype.updateChapter = function (dto) {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.put("".concat(this.prefix, "/notebooks?action=Update"), {
                                dto: dto,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 2:
                        e_6 = _a.sent();
                        throw Error(JSON.stringify(e_6));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ChapterRepo;
}());
var ChapterRepoImpl = new ChapterRepo();

var FileRepo = /** @class */ (function () {
    function FileRepo() {
        this.prefix = 'note-api';
        this.storagePrefix = 'Storage';
        this.gatewayPrefix = 'gateway-api';
        this.drivePrefix = 'drive-api';
    }
    FileRepo.prototype.createFileMeta = function (targetList) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.post("".concat(this.prefix, "/noteFileMeta"), {
                        dto: {
                            fileList: targetList,
                        },
                    })];
            });
        });
    };
    FileRepo.prototype.storageFileDeepCopy = function (fileId, workspaceId, channelId, userId) {
        return __awaiter(this, void 0, void 0, function () {
            var targetSRC;
            return __generator(this, function (_a) {
                targetSRC = "".concat(this.storagePrefix, "/StorageFile?action=Copy&Type=Deep");
                try {
                    return [2 /*return*/, API.put(targetSRC, {
                            dto: {
                                workspace_id: workspaceId,
                                channel_id: channelId,
                                storageFileInfo: {
                                    user_id: userId,
                                    file_id: fileId,
                                },
                            },
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    FileRepo.prototype.createUploadMeta = function (dto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.post("".concat(this.prefix, "/noteFile"), dto)];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    FileRepo.prototype.createUploadStorage = function (fileId, file, onUploadProgress, workspaceId, channelId, userId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.post("".concat(this.storagePrefix, "/StorageFile?action=Create&fileID=").concat(fileId, "&workspaceID=").concat(workspaceId, "&channelID=").concat(channelId, "&userID=").concat(userId), file, {
                            headers: {
                                'content-type': 'multipart/form-data',
                            },
                            xhrFields: {
                                withCredentials: true,
                            },
                            onUploadProgress: onUploadProgress,
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    FileRepo.prototype.uploadFileGW = function (file, fileName, fileExtension, location, onUploadProgress, cancelSource, channelId, pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var uploadFile;
            return __generator(this, function (_a) {
                uploadFile = new File([file], "".concat(fileName, ".").concat(fileExtension));
                return [2 /*return*/, API.post("/".concat(this.gatewayPrefix, "/upload?channel=").concat(channelId, "&name=").concat(fileName, "&ext=").concat(fileExtension, "&location=").concat(location, "&dir=") +
                        "".concat(pageId), uploadFile, {
                        headers: {
                            'content-type': 'multipart/form-data',
                        },
                        xhrFields: {
                            withCredentials: true,
                        },
                        onUploadProgress: onUploadProgress,
                        cancelToken: cancelSource.token,
                    })];
            });
        });
    };
    FileRepo.prototype.deleteFile = function (deleteFileId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/noteFile?action=Delete"), {
                                dto: {
                                    type: 'hard',
                                    file: [
                                        {
                                            channel: channelId,
                                            file_parent_id: channelId,
                                            file_id: deleteFileId,
                                            is_folder: 'N',
                                        },
                                    ],
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileRepo.prototype.deleteAllFile = function (fileList, channelId) {
        var deleteFileList = [];
        if (fileList) {
            fileList.forEach(function (file) {
                deleteFileList.push({
                    channel: channelId,
                    file_parent_id: channelId,
                    file_id: file.file_id,
                    is_folder: 'N',
                });
            });
            return API.post("".concat(this.drivePrefix, "/files?action=Delete"), {
                dto: {
                    type: 'hard',
                    file: deleteFileList,
                },
            });
        }
        return Promise.resolve();
    };
    FileRepo.prototype.getStorageVolume = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.get("/".concat(this.storagePrefix, "/StorageVolumeDomain"))];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    FileRepo.prototype.getDuplicateFile = function (fileName, fileExt, pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                query = "/".concat(this.drivePrefix, "/files/").concat(pageId, "?");
                query += "type=0";
                query += "&name=".concat(fileName);
                if (fileExt)
                    query += "&ext=".concat(fileExt);
                try {
                    return [2 /*return*/, API.get(query)];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    FileRepo.prototype.getRecycleBinAllFile = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.get("".concat(this.prefix, "/noteRecycleBinFile?action=List&note_channel_id=").concat(channelId))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(JSON.stringify(e_2));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return FileRepo;
}());
var FileRepoImpl = new FileRepo();

var PageRepo = /** @class */ (function () {
    function PageRepo() {
        this.prefix = 'note-api';
    }
    PageRepo.prototype.getNoteInfoList = function (pageId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.Get("".concat(this.prefix, "/noteinfo?action=List&note_id=").concat(pageId, "&note_channel_id=").concat(channelId))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(JSON.stringify(e_1));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.createPage = function (dto) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.Post("".concat(this.prefix, "/note"), {
                            dto: dto,
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    PageRepo.prototype.deletePage = function (pageList) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.Post("".concat(this.prefix, "/note?action=Delete"), {
                                dto: {
                                    noteList: pageList,
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(JSON.stringify(e_2));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.updatePage = function (dto) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.Put("".concat(this.prefix, "/note?action=Update"), {
                                dto: dto,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_3 = _a.sent();
                        throw Error(JSON.stringify(e_3));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.createSharePage = function (pageList) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.post("".concat(this.prefix, "/noteshare"), {
                        dto: {
                            noteList: pageList,
                        },
                    })];
            });
        });
    };
    PageRepo.prototype.throwPage = function (pageList) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/noteRecycleBin?action=Update"), {
                                dto: {
                                    noteList: pageList,
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_4 = _a.sent();
                        throw Error(JSON.stringify(e_4));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.restorePage = function (pageList) {
        return __awaiter(this, void 0, void 0, function () {
            var e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/noteRecycleBin?action=Update"), {
                                dto: {
                                    noteList: pageList,
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_5 = _a.sent();
                        throw Error(JSON.stringify(e_5));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.bookmarkPage = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/bookmark"), {
                                dto: {
                                    note_id: pageId,
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_6 = _a.sent();
                        throw Error(JSON.stringify(e_6));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.unbookmarkPage = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, API.post("".concat(this.prefix, "/bookmark?action=Delete"), {
                                dto: {
                                    note_id: pageId,
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_7 = _a.sent();
                        throw Error(JSON.stringify(e_7));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.getbookmarkList = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var query, e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = channelId ? "&note_channel_id=".concat(channelId) : '';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API.get("".concat(this.prefix, "/bookmark?action=List").concat(query))];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_8 = _a.sent();
                        throw Error(JSON.stringify(e_8));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PageRepo.prototype.getRecentList = function (channelId, num) {
        return __awaiter(this, void 0, void 0, function () {
            var query, e_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = num ? "&rownum=".concat(num) : '';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API.get("".concat(this.prefix, "/noteRecent?action=List&note_channel_id=").concat(channelId).concat(query))];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_9 = _a.sent();
                        throw Error(JSON.stringify(e_9));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return PageRepo;
}());
var PageRepoImpl = new PageRepo();

var SearchRepo = /** @class */ (function () {
    function SearchRepo() {
        this.prefix = 'note-api';
    }
    SearchRepo.prototype.getSearchList = function (searchKey, channelId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.post("".concat(this.prefix, "/noteSearch?action=List"), {
                            dto: {
                                note_channel_id: channelId,
                                text: searchKey,
                            },
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    return SearchRepo;
}());
var SearchRepoImpl = new SearchRepo();

var TagRepo = /** @class */ (function () {
    function TagRepo() {
        this.prefix = 'note-api';
    }
    TagRepo.prototype.createTag = function (tagList) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.post("".concat(this.prefix, "/tag"), {
                            dto: {
                                tagList: tagList,
                            },
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    TagRepo.prototype.deleteTag = function (targetList) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.post("".concat(this.prefix, "/tag?action=Delete"), {
                            dto: {
                                tagList: targetList,
                            },
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    TagRepo.prototype.updateTag = function (tagList) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, API.post("".concat(this.prefix, "/tag?action=Update"), {
                            dto: {
                                tagList: tagList,
                            },
                        })];
                }
                catch (e) {
                    throw Error(JSON.stringify(e));
                }
                return [2 /*return*/];
            });
        });
    };
    TagRepo.prototype.getNoteTagList = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.Get("".concat(this.prefix, "/tag?action=List&note_id=").concat(pageId, "&t=").concat(new Date()
                        .getTime()
                        .toString()))];
            });
        });
    };
    TagRepo.prototype.getAllSortedTagList = function (ChannelId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.Get("".concat(this.prefix, "/tagSort?action=List&note_channel_id=").concat(ChannelId, "&t=").concat(new Date()
                        .getTime()
                        .toString()))];
            });
        });
    };
    TagRepo.prototype.getTagNoteList = function (tagId, userId, ChannelId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, API.Get("".concat(this.prefix, "/tagnote?action=List&tag_id=").concat(tagId, "&USER_ID=").concat(userId, "\n      &note_channel_id=").concat(ChannelId))];
            });
        });
    };
    return TagRepo;
}());
var TagRepoImpl = new TagRepo();

var ChapterStore = /** @class */ (function () {
    function ChapterStore() {
        this.repo = ChapterRepoImpl;
    }
    return ChapterStore;
}());

export { ChapterModel, ChapterRepo, ChapterRepoImpl, ChapterStore, FileRepo, FileRepoImpl, PageModel, PageRepo, PageRepoImpl, SearchRepo, SearchRepoImpl, TagRepo, TagRepoImpl, i18n, useNoteCore, useNoteI18nInit };
